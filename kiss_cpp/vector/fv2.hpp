// fv2.hpp generated by vector_srcgen.py
#pragma once

#include "kissmath.hpp"

// forward declarations for conversion operators
union iv2;
union u8v2;

union fv2 {
	struct {
		f32	x, y;
	};
	f32		arr[2];

	inline f32& operator[] (int i) {
		return arr[i];
	}

	inline fv2 () {
	
	}

	inline constexpr fv2 (f32 all): x{all}, y{all} {
	
	}

	inline constexpr fv2 (f32 x, f32 y): x{x}, y{y} {
	
	}

	inline fv2 operator+= (fv2 r) {
		x += r.x;
		y += r.y;
		return *this;
	}
	inline fv2 operator-= (fv2 r) {
		x -= r.x;
		y -= r.y;
		return *this;
	}
	inline fv2 operator*= (fv2 r) {
		x *= r.x;
		y *= r.y;
		return *this;
	}
	inline fv2 operator/= (fv2 r) {
		x /= r.x;
		y /= r.y;
		return *this;
	}

	operator iv2 ();
	operator u8v2 ();
};

