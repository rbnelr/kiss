// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"


#include <string>

#include "dv3.hpp"

namespace vector {
	
	//// matrix forward declarations
	struct f64m2;
	struct f64m4;
	struct f64m2x3;
	struct f64m3x4;
	struct m3;
	
	struct f64m3 {
		dv3 arr[3]; // column major for compatibility with OpenGL
		
		//// Accessors
		
		// get cell with r,c indecies (r=row, c=column)
		f64 get (int r, int c) const;
		// get matrix column
		dv3 get_column (int indx) const;
		// get matrix row
		dv3 get_row (int indx) const;
		
		//// Constructors
		
		f64m3 ();
		// supply one value for all cells
		f64m3 (f64 all);
		// supply all cells, in row major order for readability -> c<r><c> (r=row, c=column)
		f64m3 (
				f64 c00, f64 c01, f64 c02,
				f64 c10, f64 c11, f64 c12,
				f64 c20, f64 c21, f64 c22);
		
		// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
		// supply all row vectors
		static f64m3 rows (dv3 row0, dv3 row1, dv3 row2);
		// supply all cells in row major order
		static f64m3 rows (
				f64 c00, f64 c01, f64 c02,
				f64 c10, f64 c11, f64 c12,
				f64 c20, f64 c21, f64 c22);
		// supply all column vectors
		static f64m3 columns (dv3 col0, dv3 col1, dv3 col2);
		// supply all cells in column major order
		static f64m3 columns (
				f64 c00, f64 c10, f64 c20,
				f64 c01, f64 c11, f64 c21,
				f64 c02, f64 c12, f64 c22);
		
		// identity matrix
		static f64m3 identity ();
		
		// Casting operators
		
		// extend/truncate matrix of other size
		operator f64m2 ();
		// extend/truncate matrix of other size
		operator f64m4 ();
		// extend/truncate matrix of other size
		operator f64m2x3 ();
		// extend/truncate matrix of other size
		operator f64m3x4 ();
		// typecast
		operator m3 ();
		
		// Elementwise operators
		
		f64m3 operator+ (f64m3 m);
		f64m3 operator- (f64m3 m);
	};
	
	f64m3 operator+ (f64m3 l, f64m3 r);
	f64m3 operator- (f64m3 l, f64m3 r);
	f64m3 operator* (f64m3 l, f64m3 r);
	f64m3 operator/ (f64m3 l, f64m3 r);
} // namespace vector

