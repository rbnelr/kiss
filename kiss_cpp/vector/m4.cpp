// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "m4.hpp"

#include "m2.hpp"
#include "m3.hpp"
#include "m2x3.hpp"
#include "m3x4.hpp"
#include "f64m4.hpp"

namespace vector {
	
	//// Accessors
	
	
	f32 m4::get (int r, int c) const {
		return arr[c][r];
	}
	
	fv4 m4::get_column (int indx) const {
		return arr[indx];
	}
	
	fv4 m4::get_row (int indx) const {
		return fv4(arr[0][indx], arr[1][indx], arr[2][indx], arr[3][indx]);
	}
	
	//// Constructors
	
	
	m4::m4 () {
		
	}
	
	m4::m4 (f32 all): 
	arr{
		fv4(all, all, all, all),
		fv4(all, all, all, all),
		fv4(all, all, all, all),
		fv4(all, all, all, all)} {
		
	}
	
	m4::m4 (
			f32 c00, f32 c01, f32 c02, f32 c03,
			f32 c10, f32 c11, f32 c12, f32 c13,
			f32 c20, f32 c21, f32 c22, f32 c23,
			f32 c30, f32 c31, f32 c32, f32 c33): 
	arr{
		fv4(c00, c10, c20, c30),
		fv4(c01, c11, c21, c31),
		fv4(c02, c12, c22, c32),
		fv4(c03, c13, c23, c33)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	m4 m4::rows (fv4 row0, fv4 row1, fv4 row2, fv4 row3) {
		return m4(
				row0[0], row0[1], row0[2], row0[3],
				row1[0], row1[1], row1[2], row1[3],
				row2[0], row2[1], row2[2], row2[3],
				row3[0], row3[1], row3[2], row3[3]);
	}
	
	m4 m4::rows (
			f32 c00, f32 c01, f32 c02, f32 c03,
			f32 c10, f32 c11, f32 c12, f32 c13,
			f32 c20, f32 c21, f32 c22, f32 c23,
			f32 c30, f32 c31, f32 c32, f32 c33) {
		return m4(
				c00, c01, c02, c03,
				c10, c11, c12, c13,
				c20, c21, c22, c23,
				c30, c31, c32, c33);
	}
	
	m4 m4::columns (fv4 col0, fv4 col1, fv4 col2, fv4 col3) {
		return m4(
				col0[0], col1[0], col2[0], col3[0],
				col0[1], col1[1], col2[1], col3[1],
				col0[2], col1[2], col2[2], col3[2],
				col0[3], col1[3], col2[3], col3[3]);
	}
	
	m4 m4::columns (
			f32 c00, f32 c10, f32 c20, f32 c30,
			f32 c01, f32 c11, f32 c21, f32 c31,
			f32 c02, f32 c12, f32 c22, f32 c32,
			f32 c03, f32 c13, f32 c23, f32 c33) {
		return m4(
				c00, c01, c02, c03,
				c10, c11, c12, c13,
				c20, c21, c22, c23,
				c30, c31, c32, c33);
	}
	
	
	m4 m4::identity () {
		return m4(
				1,0,0,0,
				0,1,0,0,
				0,0,1,0,
				0,0,0,1);
	}
	
	// Casting operators
	
	
	m4::operator m2 () {
		return m2(
				arr[0][0], arr[1][0],
				arr[0][1], arr[1][1]);
	}
	
	m4::operator m3 () {
		return m3(
				arr[0][0], arr[1][0], arr[2][0],
				arr[0][1], arr[1][1], arr[2][1],
				arr[0][2], arr[1][2], arr[2][2]);
	}
	
	m4::operator m2x3 () {
		return m2x3(
				arr[0][0], arr[1][0], arr[2][0],
				arr[0][1], arr[1][1], arr[2][1]);
	}
	
	m4::operator m3x4 () {
		return m3x4(
				arr[0][0], arr[1][0], arr[2][0], arr[3][0],
				arr[0][1], arr[1][1], arr[2][1], arr[3][1],
				arr[0][2], arr[1][2], arr[2][2], arr[3][2]);
	}
	
	m4::operator f64m4 () {
		return f64m4(
				(f64)arr[0][0], (f64)arr[0][1], (f64)arr[0][2], (f64)arr[0][3],
				(f64)arr[1][0], (f64)arr[1][1], (f64)arr[1][2], (f64)arr[1][3],
				(f64)arr[2][0], (f64)arr[2][1], (f64)arr[2][2], (f64)arr[2][3],
				(f64)arr[3][0], (f64)arr[3][1], (f64)arr[3][2], (f64)arr[3][3]);
	}
	
	// Elementwise operators
	
	
	m4 m4::operator+ (m4 m) {
		return m4(
				+m.arr[0][0], +m.arr[1][0], +m.arr[2][0], +m.arr[3][0],
				+m.arr[0][1], +m.arr[1][1], +m.arr[2][1], +m.arr[3][1],
				+m.arr[0][2], +m.arr[1][2], +m.arr[2][2], +m.arr[3][2],
				+m.arr[0][3], +m.arr[1][3], +m.arr[2][3], +m.arr[3][3]);
	}
	
	m4 m4::operator- (m4 m) {
		return m4(
				-m.arr[0][0], -m.arr[1][0], -m.arr[2][0], -m.arr[3][0],
				-m.arr[0][1], -m.arr[1][1], -m.arr[2][1], -m.arr[3][1],
				-m.arr[0][2], -m.arr[1][2], -m.arr[2][2], -m.arr[3][2],
				-m.arr[0][3], -m.arr[1][3], -m.arr[2][3], -m.arr[3][3]);
	}
	
	m4 operator+ (m4 l, m4 r) {
		return m4(
				l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0], l.arr[3][0] + r.arr[3][0],
				l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1], l.arr[3][1] + r.arr[3][1],
				l.arr[0][2] + r.arr[0][2], l.arr[1][2] + r.arr[1][2], l.arr[2][2] + r.arr[2][2], l.arr[3][2] + r.arr[3][2],
				l.arr[0][3] + r.arr[0][3], l.arr[1][3] + r.arr[1][3], l.arr[2][3] + r.arr[2][3], l.arr[3][3] + r.arr[3][3]);
	}
	
	m4 operator- (m4 l, m4 r) {
		return m4(
				l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0], l.arr[3][0] - r.arr[3][0],
				l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1], l.arr[3][1] - r.arr[3][1],
				l.arr[0][2] - r.arr[0][2], l.arr[1][2] - r.arr[1][2], l.arr[2][2] - r.arr[2][2], l.arr[3][2] - r.arr[3][2],
				l.arr[0][3] - r.arr[0][3], l.arr[1][3] - r.arr[1][3], l.arr[2][3] - r.arr[2][3], l.arr[3][3] - r.arr[3][3]);
	}
	
	m4 operator* (m4 l, m4 r) {
		return m4(
				l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0], l.arr[3][0] * r.arr[3][0],
				l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1], l.arr[3][1] * r.arr[3][1],
				l.arr[0][2] * r.arr[0][2], l.arr[1][2] * r.arr[1][2], l.arr[2][2] * r.arr[2][2], l.arr[3][2] * r.arr[3][2],
				l.arr[0][3] * r.arr[0][3], l.arr[1][3] * r.arr[1][3], l.arr[2][3] * r.arr[2][3], l.arr[3][3] * r.arr[3][3]);
	}
	
	m4 operator/ (m4 l, m4 r) {
		return m4(
				l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0], l.arr[3][0] / r.arr[3][0],
				l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1], l.arr[3][1] / r.arr[3][1],
				l.arr[0][2] / r.arr[0][2], l.arr[1][2] / r.arr[1][2], l.arr[2][2] / r.arr[2][2], l.arr[3][2] / r.arr[3][2],
				l.arr[0][3] / r.arr[0][3], l.arr[1][3] / r.arr[1][3], l.arr[2][3] / r.arr[2][3], l.arr[3][3] / r.arr[3][3]);
	}
} // namespace vector

