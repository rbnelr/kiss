// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"


namespace vector {
	//// forward declarations
	union bv2;
	union bv4;
	union bv3;
	union fv3;
	union dv3;
	union iv3;
	union s64v3;
	union u8v3;
	
	union bv3 {
		struct {
			bool	x, y, z;
		};
		bool		arr[3];
		
		
		inline FORCEINLINE bool& operator[] (int i) {
			return arr[i];
		}
		
		inline FORCEINLINE bool const& operator[] (int i) const {
			return arr[i];
		}
		
		
		inline FORCEINLINE bv3 () {
			
		}
		
		// sets all components to one value
		// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
		inline FORCEINLINE bv3 (bool all): x{all}, y{all}, z{all} {
			
		}
		
		// supply all components
		inline FORCEINLINE bv3 (bool x, bool y, bool z): x{x}, y{y}, z{z} {
			
		}
		// extend vector
		bv3 (bv2 xy, bool z);
		// truncate vector
		bv3 (bv4 v);
		
		//// Truncating cast operators
		
		explicit operator bv2 () const;
		
		//// Type cast operators
		
	};
	
	//// reducing ops
	// all components are true
	bool all (bv3 v);
	// any components is true
	bool any (bv3 v);
	
	//// arthmethic ops
	
	inline FORCEINLINE bv3 operator! (bv3 v) {
		return bv3(!v.x, !v.y, !v.z);
	}
	
	inline FORCEINLINE bv3 operator&& (bv3 l, bv3 r) {
		return bv3(l.x && r.x, l.y && r.y, l.z && r.z);
	}
	
	inline FORCEINLINE bv3 operator|| (bv3 l, bv3 r) {
		return bv3(l.x || r.x, l.y || r.y, l.z || r.z);
	}
	
	//// comparison ops
	bv3 operator== (bv3 l, bv3 r);
	bv3 operator!= (bv3 l, bv3 r);
	// vectors are equal, equivalent to all(l == r)
	bool equal (bv3 l, bv3 r);
	// componentwise ternary c ? l : r
	bv3 select (bv3 c, bv3 l, bv3 r);
}// namespace vector

