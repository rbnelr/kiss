// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"

#include "fv3.hpp"
#include "fv2.hpp"

namespace vector {
	
	//// matrix forward declarations
	struct fm2;
	struct fm3;
	struct fm4;
	struct fm3x4;
	struct dm2x3;
	
	struct fm2x3 {
		fv2 arr[3]; // column major for compatibility with OpenGL
		
		//// Accessors
		
		
		// get cell with r,c indecies (r=row, c=column)
		inline FORCEINLINE f32 const& get (int r, int c) const {
			return arr[c][r];
		}
		
		// get matrix column
		inline FORCEINLINE fv2 const& get_column (int indx) const {
			return arr[indx];
		}
		// get matrix row
		fv3 get_row (int indx) const;
		
		//// Constructors
		
		
		inline FORCEINLINE fm2x3 () {
			
		}
		
		// supply one value for all cells
		inline FORCEINLINE explicit fm2x3 (f32 all): 
		arr{fv2(all, all),
			fv2(all, all),
			fv2(all, all)} {
			
		}
		
		// supply all cells, in row major order for readability -> c<r><c> (r=row, c=column)
		inline FORCEINLINE explicit fm2x3 (f32 c00, f32 c01, f32 c02,
										   f32 c10, f32 c11, f32 c12): 
		arr{fv2(c00, c10),
			fv2(c01, c11),
			fv2(c02, c12)} {
			
		}
		
		// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
		// supply all row vectors
		static fm2x3 rows (fv3 row0, fv3 row1);
		// supply all cells in row major order
		static fm2x3 rows (f32 c00, f32 c01, f32 c02,
						   f32 c10, f32 c11, f32 c12);
		// supply all column vectors
		static fm2x3 columns (fv2 col0, fv2 col1, fv2 col2);
		// supply all cells in column major order
		static fm2x3 columns (f32 c00, f32 c10,
							  f32 c01, f32 c11,
							  f32 c02, f32 c12);
		
		
		// identity matrix
		static inline FORCEINLINE fm2x3 identity () {
			return fm2x3(1,0,0,
						 0,1,0);
		}
		
		// Casting operators
		
		// extend/truncate matrix of other size
		explicit operator fm2 () const;
		// extend/truncate matrix of other size
		explicit operator fm3 () const;
		// extend/truncate matrix of other size
		explicit operator fm4 () const;
		// extend/truncate matrix of other size
		explicit operator fm3x4 () const;
		// typecast
		explicit operator dm2x3 () const;
		
		// Elementwise operators
		
		fm2x3& operator+= (f32 r);
		fm2x3& operator-= (f32 r);
		fm2x3& operator*= (f32 r);
		fm2x3& operator/= (f32 r);
		
		// Matrix multiplication
		
		fm2x3& operator*= (fm2x3 const& r);
	};
	
	// Elementwise operators
	
	fm2x3 operator+ (fm2x3 const& m);
	fm2x3 operator- (fm2x3 const& m);
	
	fm2x3 operator+ (fm2x3 const& l, fm2x3 const& r);
	fm2x3 operator+ (fm2x3 const& l, f32 r);
	fm2x3 operator+ (f32 l, fm2x3 const& r);
	
	fm2x3 operator- (fm2x3 const& l, fm2x3 const& r);
	fm2x3 operator- (fm2x3 const& l, f32 r);
	fm2x3 operator- (f32 l, fm2x3 const& r);
	
	fm2x3 mul_elementwise (fm2x3 const& l, fm2x3 const& r);
	fm2x3 operator* (fm2x3 const& l, f32 r);
	fm2x3 operator* (f32 l, fm2x3 const& r);
	
	fm2x3 div_elementwise (fm2x3 const& l, fm2x3 const& r);
	fm2x3 operator/ (fm2x3 const& l, f32 r);
	fm2x3 operator/ (f32 l, fm2x3 const& r);
	
	// Matrix ops
	
	fm2x3 operator* (fm2x3 const& l, fm3 const& r);
	// fm2x3 * fm3x4 -> 2x4 ; matrix not implemented
	fv2 operator* (fm2x3 const& l, fv3 r);
	fv3 operator* (fv2 l, fm2x3 const& r);
	
	// Matrix op shortforms for working with 2x3 matricies as 2x2 matricies plus translation
	
	// fm2x3 * fm2 = fm2x3, shortform for fm2x3 * (fm3)fm2 = fm2x3
	fm2x3 operator* (fm2x3 const& l, fm2 const& r);
	// fm2x3 * fm2x3 = fm2x3, shortform for fm2x3 * (fm3)fm2x3 = fm2x3
	fm2x3 operator* (fm2x3 const& l, fm2x3 const& r);
	// fm2x3 * fv2 = fv2, shortform for fm2x3 * fv3(fv2, 1) = fv2
	fv2 operator* (fm2x3 const& l, fv2 r);
} // namespace vector

