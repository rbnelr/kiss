// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "dv3.hpp"

#include "dv2.hpp"
#include "dv4.hpp"
#include "bv3.hpp"
#include "bv3.hpp"
#include "fv3.hpp"
#include "iv3.hpp"
#include "s64v3.hpp"
#include "u8v3.hpp"

namespace vector {
	
	f64& dv3::operator[] (int i) {
		return arr[i];
	}
	
	f64 const& dv3::operator[] (int i) const {
		return arr[i];
	}
	
	
	dv3::dv3 () {
		
	}
	
	dv3::dv3 (f64 all): x{all}, y{all}, z{all} {
		
	}
	
	dv3::dv3 (f64 x, f64 y, f64 z): x{x}, y{y}, z{z} {
		
	}
	
	dv3::dv3 (dv2 xy, f64 z): x{xy.x}, y{xy.y}, z{z} {
		
	}
	
	dv3::dv3 (dv4 v): x{v.x}, y{v.y}, z{v.z} {
		
	}
	
	//// Truncating cast operators
	
	
	dv3::operator dv2 () const {
		return dv2(x, y);
	}
	
	//// Type cast operators
	
	
	dv3::operator bv3 () const {
		return bv3((bool)x, (bool)y, (bool)z);
	}
	
	dv3::operator fv3 () const {
		return fv3((f32)x, (f32)y, (f32)z);
	}
	
	dv3::operator iv3 () const {
		return iv3((s32)x, (s32)y, (s32)z);
	}
	
	dv3::operator s64v3 () const {
		return s64v3((s64)x, (s64)y, (s64)z);
	}
	
	dv3::operator u8v3 () const {
		return u8v3((u8)x, (u8)y, (u8)z);
	}
	
	
	dv3 dv3::operator+= (dv3 r) {
		x += r.x;
		y += r.y;
		z += r.z;
		return *this;
	}
	
	dv3 dv3::operator-= (dv3 r) {
		x -= r.x;
		y -= r.y;
		z -= r.z;
		return *this;
	}
	
	dv3 dv3::operator*= (dv3 r) {
		x *= r.x;
		y *= r.y;
		z *= r.z;
		return *this;
	}
	
	dv3 dv3::operator/= (dv3 r) {
		x /= r.x;
		y /= r.y;
		z /= r.z;
		return *this;
	}
	
	//// arthmethic ops
	
	dv3 operator+ (dv3 v) {
		return dv3(+v.x, +v.y, +v.z);
	}
	
	dv3 operator- (dv3 v) {
		return dv3(-v.x, -v.y, -v.z);
	}
	
	dv3 operator+ (dv3 l, dv3 r) {
		return dv3(l.x + r.x, l.y + r.y, l.z + r.z);
	}
	
	dv3 operator- (dv3 l, dv3 r) {
		return dv3(l.x - r.x, l.y - r.y, l.z - r.z);
	}
	
	dv3 operator* (dv3 l, dv3 r) {
		return dv3(l.x * r.x, l.y * r.y, l.z * r.z);
	}
	
	dv3 operator/ (dv3 l, dv3 r) {
		return dv3(l.x / r.x, l.y / r.y, l.z / r.z);
	}
	
	//// comparison ops
	
	bv3 operator< (dv3 l, dv3 r) {
		return bv3(l.x < r.x, l.y < r.y, l.z < r.z);
	}
	
	bv3 operator<= (dv3 l, dv3 r) {
		return bv3(l.x <= r.x, l.y <= r.y, l.z <= r.z);
	}
	
	bv3 operator> (dv3 l, dv3 r) {
		return bv3(l.x > r.x, l.y > r.y, l.z > r.z);
	}
	
	bv3 operator>= (dv3 l, dv3 r) {
		return bv3(l.x >= r.x, l.y >= r.y, l.z >= r.z);
	}
	
	bv3 operator== (dv3 l, dv3 r) {
		return bv3(l.x == r.x, l.y == r.y, l.z == r.z);
	}
	
	bv3 operator!= (dv3 l, dv3 r) {
		return bv3(l.x != r.x, l.y != r.y, l.z != r.z);
	}
	
	bool equal (dv3 l, dv3 r) {
		return all(l == r);
	}
	
	dv3 select (bv3 c, dv3 l, dv3 r) {
		return c.x ? l.x : r.x, c.y ? l.y : r.y, c.z ? l.z : r.z;
	}
	
	//// misc ops
	
	dv3 abs (dv3 v) {
		return dv3(abs(v.x), abs(v.y), abs(v.z));
	}
	
	dv3 min (dv3 l, dv3 r) {
		return dv3(min(l.x,r.x), min(l.y,r.y), min(l.z,r.z));
	}
	
	dv3 max (dv3 l, dv3 r) {
		return dv3(max(l.x,r.x), max(l.y,r.y), max(l.z,r.z));
	}
	
	dv3 clamp (dv3 x, dv3 a, dv3 b) {
		return min(max(x,a), b);
	}
	
	f64 min_component (dv3 v, int* min_index) {
		int index = 0;
		f64 min_val = v.x;	
		for (int i=1; i<3; ++i) {
			if (v.arr[i] <= min_val) {
				index = i;
				min_val = v.arr[i];
			}
		}
		if (min_index) *min_index = index;
		return min_val;
	}
	
	f64 max_component (dv3 v, int* max_index) {
		int index = 0;
		f64 max_val = v.x;	
		for (int i=1; i<3; ++i) {
			if (v.arr[i] >= max_val) {
				index = i;
				max_val = v.arr[i];
			}
		}
		if (max_index) *max_index = index;
		return max_val;
	}
	
	
	dv3 floor (dv3 v) {
		return dv3(floor(v.x), floor(v.y), floor(v.z));
	}
	
	dv3 ceil (dv3 v) {
		return dv3(ceil(v.x), ceil(v.y), ceil(v.z));
	}
	
	dv3 round (dv3 v) {
		return dv3(round(v.x), round(v.y), round(v.z));
	}
	
	s64v3 floori (dv3 v) {
		return s64v3(floori(v.x), floori(v.y), floori(v.z));
	}
	
	s64v3 ceili (dv3 v) {
		return s64v3(ceili(v.x), ceili(v.y), ceili(v.z));
	}
	
	s64v3 roundi (dv3 v) {
		return s64v3(roundi(v.x), roundi(v.y), roundi(v.z));
	}
	
	dv3 pow (dv3 v, dv3 e) {
		return dv3(pow(v.x,e.x), pow(v.y,e.y), pow(v.z,e.z));
	}
	
	dv3 wrap (dv3 v, dv3 range) {
		return dv3(wrap(v.x,range.x), wrap(v.y,range.y), wrap(v.z,range.z));
	}
	
	dv3 wrap (dv3 v, dv3 a, dv3 b) {
		return dv3(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y), wrap(v.z,a.z,b.z));
	}
	
	
	dv3 lerp (dv3 a, dv3 b, dv3 t) {
		return a * (dv3(1) - t) + b * t;
	}
	
	dv3 map (dv3 x, dv3 in_a, dv3 in_b) {
		return (x - in_a) / (in_b - in_a);
	}
	
	dv3 map (dv3 x, dv3 in_a, dv3 in_b, dv3 out_a, dv3 out_b) {
		return lerp(out_a, out_b, map(x, in_a, in_b));
	}
	
	//// angle stuff
	
	dv3 to_rad (dv3 deg) {
		return (dv3)deg * DEG_TO_RADd;
	}
	
	dv3 deg (dv3 deg) {
		return (dv3)deg * DEG_TO_RADd;
	}
	
	dv3 to_deg (dv3 rad) {
		return (dv3)rad * RAD_TO_DEGd;
	}
	
	//// linear algebra ops
	
	f64 length (dv3 v) {
		return sqrt((f64)(v.x * v.x + v.y * v.y + v.z * v.z));
	}
	
	f64 length_sqr (dv3 v) {
		return v.x * v.x + v.y * v.y + v.z * v.z;
	}
	
	f64 distance (dv3 a, dv3 b) {
		return length(a - b);
	}
	
	dv3 normalize (dv3 v) {
		return dv3(v) / length(v);
	}
	
	dv3 normalize_or_zero (dv3 v) {
		f64 len = length(v);
		if (len == f64(0)) {
			return f64(0);
		}
		return dv3(v) / dv3(len);
	}
	
	f64 dot (dv3 l, dv3 r) {
		return l.x * r.x + l.y * r.y + l.z * r.z;
	}
	
	dv3 cross (dv3 l, dv3 r) {
		return dv3(
				l.y * r.z - l.z * r.y,
				l.z * r.x - l.x * r.z,
				l.x * r.y - l.y * r.x);
	}
}// namespace vector

