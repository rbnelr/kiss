// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"

//// forward declarations
union u8v3;
union u8v4;
union bv2;
union fv2;
union dv2;

union u8v2 {
	struct {
		u8	x, y;
	};
	u8		arr[2];
	
	u8& operator[] (int i);
	u8 operator[] (int i) const;
	
	u8v2 ();
	// sets all components to one value
	constexpr u8v2 (u8 all);
	// supply all components
	constexpr u8v2 (u8 x, u8 y);
	// truncate vector
	constexpr u8v2 (u8v3 v);
	// truncate vector
	constexpr u8v2 (u8v4 v);
	
	u8v2 operator+= (u8v2 r);
	u8v2 operator-= (u8v2 r);
	u8v2 operator*= (u8v2 r);
	u8v2 operator/= (u8v2 r);
	
	//// Conversion operators
	operator fv2 () const;
	operator dv2 () const;
};

//// arthmethic ops
constexpr u8v2 operator+ (u8v2 v);
constexpr u8v2 operator- (u8v2 v);
constexpr u8v2 operator+ (u8v2 l, u8v2 r);
constexpr u8v2 operator- (u8v2 l, u8v2 r);
constexpr u8v2 operator* (u8v2 l, u8v2 r);
constexpr u8v2 operator/ (u8v2 l, u8v2 r);

//// comparison ops
constexpr bv2 operator< (u8v2 l, u8v2 r);
constexpr bv2 operator<= (u8v2 l, u8v2 r);
constexpr bv2 operator> (u8v2 l, u8v2 r);
constexpr bv2 operator>= (u8v2 l, u8v2 r);
constexpr bv2 operator== (u8v2 l, u8v2 r);
constexpr bv2 operator!= (u8v2 l, u8v2 r);
// vectors are equal, equivalent to all(l == r)
constexpr bool equal (u8v2 l, u8v2 r);
// componentwise ternary c ? l : r
constexpr u8v2 select (u8v2 c, u8v2 l, u8v2 r);

//// misc ops
u8v2 abs (u8v2 v);
u8v2 min (u8v2 l, u8v2 r);
u8v2 max (u8v2 l, u8v2 r);
u8v2 clamp (u8v2 x, u8v2 a=u8v2(0), u8v2 b=u8v2(1));
// get min component of vector, optionally get component index via min_index
u8 min_component (u8v2 v, int* min_index=nullptr);
// get max component of vector, optionally get component index via max_index
u8 max_component (u8v2 v, int* max_index=nullptr);

u8v2 wrap (u8v2 v, u8v2 range);
u8v2 wrap (u8v2 v, u8v2 a, u8v2 b);

//// linear algebra ops
// magnitude of vector
f32 length (u8v2 v);
// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
u8 length_sqr (u8v2 v);
// distance between points, equivalent to length(a - b)
f32 distance (u8v2 a, u8v2 b);
// normalize vector so that it has length() = 1, undefined for zero vector
fv2 normalize (u8v2 v);
// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
fv2 normalize_or_zero (u8v2 v);


