// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "s64v3.hpp"

#include "s64v2.hpp"
#include "s64v4.hpp"
#include "bv3.hpp"
#include "bv3.hpp"
#include "fv3.hpp"
#include "dv3.hpp"
#include "iv3.hpp"
#include "u8v3.hpp"

namespace vector {
	
	
	// extend vector
	s64v3::s64v3 (s64v2 xy, s64 z): x{xy.x}, y{xy.y}, z{z} {
		
	}
	
	// truncate vector
	s64v3::s64v3 (s64v4 v): x{v.x}, y{v.y}, z{v.z} {
		
	}
	
	//// Truncating cast operators
	
	
	s64v3::operator s64v2 () const {
		return s64v2(x, y);
	}
	
	//// Type cast operators
	
	
	s64v3::operator bv3 () const {
		return bv3((bool)x, (bool)y, (bool)z);
	}
	
	s64v3::operator fv3 () const {
		return fv3((f32)x, (f32)y, (f32)z);
	}
	
	s64v3::operator dv3 () const {
		return dv3((f64)x, (f64)y, (f64)z);
	}
	
	s64v3::operator iv3 () const {
		return iv3((s32)x, (s32)y, (s32)z);
	}
	
	s64v3::operator u8v3 () const {
		return u8v3((u8)x, (u8)y, (u8)z);
	}
	
	
	//// arthmethic ops
	
	//// comparison ops
	
	bv3 operator< (s64v3 l, s64v3 r) {
		return bv3(l.x < r.x, l.y < r.y, l.z < r.z);
	}
	
	bv3 operator<= (s64v3 l, s64v3 r) {
		return bv3(l.x <= r.x, l.y <= r.y, l.z <= r.z);
	}
	
	bv3 operator> (s64v3 l, s64v3 r) {
		return bv3(l.x > r.x, l.y > r.y, l.z > r.z);
	}
	
	bv3 operator>= (s64v3 l, s64v3 r) {
		return bv3(l.x >= r.x, l.y >= r.y, l.z >= r.z);
	}
	
	bv3 operator== (s64v3 l, s64v3 r) {
		return bv3(l.x == r.x, l.y == r.y, l.z == r.z);
	}
	
	bv3 operator!= (s64v3 l, s64v3 r) {
		return bv3(l.x != r.x, l.y != r.y, l.z != r.z);
	}
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (s64v3 l, s64v3 r) {
		return all(l == r);
	}
	
	// componentwise ternary c ? l : r
	s64v3 select (bv3 c, s64v3 l, s64v3 r) {
		return c.x ? l.x : r.x, c.y ? l.y : r.y, c.z ? l.z : r.z;
	}
	
	//// misc ops
	
	s64v3 clamp (s64v3 x, s64v3 a, s64v3 b) {
		return min(max(x,a), b);
	}
	
	// get min component of vector, optionally get component index via min_index
	s64 min_component (s64v3 v, int* min_index) {
		int index = 0;
		s64 min_val = v.x;	
		for (int i=1; i<3; ++i) {
			if (v.arr[i] <= min_val) {
				index = i;
				min_val = v.arr[i];
			}
		}
		if (min_index) *min_index = index;
		return min_val;
	}
	
	// get max component of vector, optionally get component index via max_index
	s64 max_component (s64v3 v, int* max_index) {
		int index = 0;
		s64 max_val = v.x;	
		for (int i=1; i<3; ++i) {
			if (v.arr[i] >= max_val) {
				index = i;
				max_val = v.arr[i];
			}
		}
		if (max_index) *max_index = index;
		return max_val;
	}
	
	
	
	dv3 to_rad (s64v3 deg) {
		return (dv3)deg * DEG_TO_RADd;
	}
	
	// degress "literal", converts degrees to radiants
	dv3 deg (s64v3 deg) {
		return (dv3)deg * DEG_TO_RADd;
	}
	
	dv3 to_deg (s64v3 rad) {
		return (dv3)rad * RAD_TO_DEGd;
	}
	
	//// linear algebra ops
	
	// magnitude of vector
	f64 length (s64v3 v) {
		return sqrt((f64)(v.x * v.x + v.y * v.y + v.z * v.z));
	}
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	s64 length_sqr (s64v3 v) {
		return v.x * v.x + v.y * v.y + v.z * v.z;
	}
	
	// distance between points, equivalent to length(a - b)
	f64 distance (s64v3 a, s64v3 b) {
		return length(a - b);
	}
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	dv3 normalize (s64v3 v) {
		return dv3(v) / length(v);
	}
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	dv3 normalize_or_zero (s64v3 v) {
		f64 len = length(v);
		if (len == f64(0)) {
			return f64(0);
		}
		return dv3(v) / dv3(len);
	}
	
	// dot product
	s64 dot (s64v3 l, s64v3 r) {
		return l.x * r.x + l.y * r.y + l.z * r.z;
	}
	
	// 3d cross product
	s64v3 cross (s64v3 l, s64v3 r) {
		return s64v3(
					 l.y * r.z - l.z * r.y,
					 l.z * r.x - l.x * r.z,
					 l.x * r.y - l.y * r.x);
	}
}// namespace vector

