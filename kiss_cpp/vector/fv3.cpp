// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "fv3.hpp"

#include "fv2.hpp"
#include "fv4.hpp"
#include "bv3.hpp"
#include "iv3.hpp"
#include "s64v3.hpp"
#include "u8v3.hpp"

f32& fv3::operator[] (int i) {
	return arr[i];
}

f32 fv3::operator[] (int i) const {
	return arr[i];
}


fv3::fv3 () {
	
}

constexpr fv3::fv3 (f32 all): x{all}, y{all}, z{all} {
	
}

constexpr fv3::fv3 (f32 x, f32 y, f32 z): x{x}, y{y}, z{z} {
	
}

constexpr fv3::fv3 (fv2 xy, f32 z): x{xy.x}, y{xy.y}, z{z} {
	
}

constexpr fv3::fv3 (fv4 v): x{v.x}, y{v.y}, z{v.z} {
	
}


fv3 fv3::operator+= (fv3 r) {
	x += r.x;
	y += r.y;
	z += r.z;
	return *this;
}

fv3 fv3::operator-= (fv3 r) {
	x -= r.x;
	y -= r.y;
	z -= r.z;
	return *this;
}

fv3 fv3::operator*= (fv3 r) {
	x *= r.x;
	y *= r.y;
	z *= r.z;
	return *this;
}

fv3 fv3::operator/= (fv3 r) {
	x /= r.x;
	y /= r.y;
	z /= r.z;
	return *this;
}

//// Conversion operators

fv3::operator iv3 () const {
	return iv3((int)x, (int)y, (int)z);
}

fv3::operator s64v3 () const {
	return s64v3((s64)x, (s64)y, (s64)z);
}

fv3::operator u8v3 () const {
	return u8v3((u8)x, (u8)y, (u8)z);
}

//// arthmethic ops

constexpr fv3 operator+ (fv3 v) {
	return fv3(+v.x, +v.y, +v.z);
}

constexpr fv3 operator- (fv3 v) {
	return fv3(-v.x, -v.y, -v.z);
}

constexpr fv3 operator+ (fv3 l, fv3 r) {
	return fv3(l.x + r.x, l.y + r.y, l.z + r.z);
}

constexpr fv3 operator- (fv3 l, fv3 r) {
	return fv3(l.x - r.x, l.y - r.y, l.z - r.z);
}

constexpr fv3 operator* (fv3 l, fv3 r) {
	return fv3(l.x * r.x, l.y * r.y, l.z * r.z);
}

constexpr fv3 operator/ (fv3 l, fv3 r) {
	return fv3(l.x / r.x, l.y / r.y, l.z / r.z);
}

//// comparison ops

constexpr bv3 operator< (fv3 l, fv3 r) {
	return bv3(l.x < r.x, l.y < r.y, l.z < r.z);
}

constexpr bv3 operator<= (fv3 l, fv3 r) {
	return bv3(l.x <= r.x, l.y <= r.y, l.z <= r.z);
}

constexpr bv3 operator> (fv3 l, fv3 r) {
	return bv3(l.x > r.x, l.y > r.y, l.z > r.z);
}

constexpr bv3 operator>= (fv3 l, fv3 r) {
	return bv3(l.x >= r.x, l.y >= r.y, l.z >= r.z);
}

constexpr bv3 operator== (fv3 l, fv3 r) {
	return bv3(l.x == r.x, l.y == r.y, l.z == r.z);
}

constexpr bv3 operator!= (fv3 l, fv3 r) {
	return bv3(l.x != r.x, l.y != r.y, l.z != r.z);
}

constexpr bool equal (fv3 l, fv3 r) {
	return all(l == r);
}

constexpr fv3 select (fv3 c, fv3 l, fv3 r) {
	return c.x ? l.x : r.x, c.y ? l.y : r.y, c.z ? l.z : r.z;
}

//// misc ops

fv3 abs (fv3 v) {
	return fv3(abs(v.x), abs(v.y), abs(v.z));
}

fv3 min (fv3 l, fv3 r) {
	return fv3(min(l.x,r.x), min(l.y,r.y), min(l.z,r.z));
}

fv3 max (fv3 l, fv3 r) {
	return fv3(max(l.x,r.x), max(l.y,r.y), max(l.z,r.z));
}

fv3 clamp (fv3 x, fv3 a, fv3 b) {
	return min(max(x,a), b);
}

f32 min_component (fv3 v, int* min_index) {
	int index = 0;
	f32 min_val = v.x;	
	for (int i=1; i<3; ++i) {
		if (v.arr[i] <= min_val) {
			index = i;
			min_val = v.arr[i];
		}
	}
	if (min_index) *min_index = index;
	return min_val;
}

f32 max_component (fv3 v, int* max_index) {
	int index = 0;
	f32 max_val = v.x;	
	for (int i=1; i<3; ++i) {
		if (v.arr[i] >= max_val) {
			index = i;
			max_val = v.arr[i];
		}
	}
	if (max_index) *max_index = index;
	return max_val;
}


fv3 floor (fv3 v) {
	return fv3(floor(v.x), floor(v.y), floor(v.z));
}

fv3 ceil (fv3 v) {
	return fv3(ceil(v.x), ceil(v.y), ceil(v.z));
}

fv3 round (fv3 v) {
	return fv3(round(v.x), round(v.y), round(v.z));
}

iv3 floori (fv3 v) {
	return iv3(floori(v.x), floori(v.y), floori(v.z));
}

iv3 ceili (fv3 v) {
	return iv3(ceili(v.x), ceili(v.y), ceili(v.z));
}

iv3 roundi (fv3 v) {
	return iv3(roundi(v.x), roundi(v.y), roundi(v.z));
}

fv3 pow (fv3 v, fv3 e) {
	return fv3(pow(v.x,e.x), pow(v.y,e.y), pow(v.z,e.z));
}

fv3 wrap (fv3 v, fv3 range) {
	return fv3(wrap(v.x,range.x), wrap(v.y,range.y), wrap(v.z,range.z));
}

fv3 wrap (fv3 v, fv3 a, fv3 b) {
	return fv3(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y), wrap(v.z,a.z,b.z));
}

//// linear algebra ops

f32 length (fv3 v) {
	return sqrt((f32)(v.x * v.x + v.y * v.y + v.z * v.z));
}

f32 length_sqr (fv3 v) {
	return v.x * v.x + v.y * v.y + v.z * v.z;
}

f32 distance (fv3 a, fv3 b) {
	return length(a - b);
}

fv3 normalize (fv3 v) {
	return fv3(v) / length(v);
}

fv3 normalize_or_zero (fv3 v) {
	f32 len = length(v);
	if (len == f32(0)) {
		return f32(0);
	}
	return fv3(v) / fv3(len);
}


fv3 lerp (fv3 a, fv3 b, fv3 t) {
	return a * (fv3(1) - t) + b * t;
}

fv3 map (fv3 x, fv3 in_a, fv3 in_b) {
	return (x - in_a) / (in_b - in_a);
}

fv3 map (fv3 x, fv3 in_a, fv3 in_b, fv3 out_a, fv3 out_b) {
	return lerp(out_a, out_b, map(x, in_a, in_b));
}

fv3 smoothstep (fv3 x) {
	fv3 t = clamp(x);
	return t * t * (fv3(3) - fv3(2) * t);
}

fv3 bezier (fv3 a, fv3 b, fv3 c, f32 t) {
	fv3 d = lerp(a, b, t);
	fv3 e = lerp(b, c, t);
	fv3 f = lerp(d, e, t);
	return f;
}

fv3 bezier (fv3 a, fv3 b, fv3 c, fv3 d, f32 t) {
	return bezier(
		lerp(a, b, t),
		lerp(b, c, t),
		lerp(c, d, t),
		t
	);
}

fv3 bezier (fv3 a, fv3 b, fv3 c, fv3 d, fv3 e, f32 t) {
	return bezier(
		lerp(a, b, t),
		lerp(b, c, t),
		lerp(c, d, t),
		lerp(d, e, t),
		t
	);
}

//// angle stuff

constexpr fv3 to_rad (fv3 deg) {
	return deg * DEG_TO_RAD;
}

constexpr fv3 deg (fv3 deg) {
	return deg * DEG_TO_RAD;
}

constexpr fv3 to_deg (fv3 rad) {
	return rad * RAD_TO_DEG;
}

