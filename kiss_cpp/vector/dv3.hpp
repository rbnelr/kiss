// dv3.hpp generated by vector_srcgen.py
#pragma once

#include "kissmath.hpp"

// forward declarations for conversion operators
union iv3;
union u8v3;

union dv3 {
	struct {
		f64	x, y, z;
	};
	f64		arr[3];

	inline f64& operator[] (int i) {
		return arr[i];
	}

	inline dv3 () {
	
	}

	inline constexpr dv3 (f64 all): x{all}, y{all}, z{all} {
	
	}

	inline constexpr dv3 (f64 x, f64 y, f64 z): x{x}, y{y}, z{z} {
	
	}

	inline dv3 operator+= (dv3 r) {
		x += r.x;
		y += r.y;
		z += r.z;
		return *this;
	}
	inline dv3 operator-= (dv3 r) {
		x -= r.x;
		y -= r.y;
		z -= r.z;
		return *this;
	}
	inline dv3 operator*= (dv3 r) {
		x *= r.x;
		y *= r.y;
		z *= r.z;
		return *this;
	}
	inline dv3 operator/= (dv3 r) {
		x /= r.x;
		y /= r.y;
		z /= r.z;
		return *this;
	}

	operator iv3 ();
	operator u8v3 ();
};

