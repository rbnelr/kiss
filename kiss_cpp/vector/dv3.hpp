// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"


namespace vector {
	//// forward declarations
	union dv2;
	union dv4;
	union bv3;
	union bv3;
	union fv3;
	union iv3;
	union s64v3;
	union u8v3;
	
	union dv3 {
		struct {
			f64	x, y, z;
		};
		f64		arr[3];
		
		f64& operator[] (int i);
		f64 const& operator[] (int i) const;
		
		dv3 ();
		// sets all components to one value
		// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
		dv3 (f64 all);
		// supply all components
		dv3 (f64 x, f64 y, f64 z);
		// extend vector
		dv3 (dv2 xy, f64 z);
		// truncate vector
		dv3 (dv4 v);
		
		//// Truncating cast operators
		
		explicit operator dv2 () const;
		
		//// Type cast operators
		
		explicit operator bv3 () const;
		explicit operator fv3 () const;
		explicit operator iv3 () const;
		explicit operator s64v3 () const;
		explicit operator u8v3 () const;
		
		dv3 operator+= (dv3 r);
		dv3 operator-= (dv3 r);
		dv3 operator*= (dv3 r);
		dv3 operator/= (dv3 r);
	};
	
	//// arthmethic ops
	dv3 operator+ (dv3 v);
	dv3 operator- (dv3 v);
	dv3 operator+ (dv3 l, dv3 r);
	dv3 operator- (dv3 l, dv3 r);
	dv3 operator* (dv3 l, dv3 r);
	dv3 operator/ (dv3 l, dv3 r);
	
	//// comparison ops
	bv3 operator< (dv3 l, dv3 r);
	bv3 operator<= (dv3 l, dv3 r);
	bv3 operator> (dv3 l, dv3 r);
	bv3 operator>= (dv3 l, dv3 r);
	bv3 operator== (dv3 l, dv3 r);
	bv3 operator!= (dv3 l, dv3 r);
	// vectors are equal, equivalent to all(l == r)
	bool equal (dv3 l, dv3 r);
	// componentwise ternary c ? l : r
	dv3 select (bv3 c, dv3 l, dv3 r);
	
	//// misc ops
	dv3 abs (dv3 v);
	dv3 min (dv3 l, dv3 r);
	dv3 max (dv3 l, dv3 r);
	dv3 clamp (dv3 x, dv3 a=dv3(0), dv3 b=dv3(1));
	// get min component of vector, optionally get component index via min_index
	f64 min_component (dv3 v, int* min_index=nullptr);
	// get max component of vector, optionally get component index via max_index
	f64 max_component (dv3 v, int* max_index=nullptr);
	
	dv3 floor (dv3 v);
	dv3 ceil (dv3 v);
	dv3 round (dv3 v);
	s64v3 floori (dv3 v);
	s64v3 ceili (dv3 v);
	s64v3 roundi (dv3 v);
	dv3 pow (dv3 v, dv3 e);
	dv3 wrap (dv3 v, dv3 range);
	dv3 wrap (dv3 v, dv3 a, dv3 b);
	
	// linear interpolation t=0 -> a ; t=1 -> b ; t=0.5 -> (a+b)/2
	dv3 lerp (dv3 a, dv3 b, dv3 t);
	// linear mapping (reverse linear interpolation), map(70, 0,100) -> 0.7 ; map(0.5, -1,+1) -> 0.75
	dv3 map (dv3 x, dv3 in_a, dv3 in_b);
	// linear mapping, lerp(out_a, out_b, map(x, in_a, in_b))
	dv3 map (dv3 x, dv3 in_a, dv3 in_b, dv3 out_a, dv3 out_b);
	
	//// angle stuff
	dv3 to_rad (dv3 deg);
	// degress "literal", converts degrees to radiants
	dv3 deg (dv3 deg);
	dv3 to_deg (dv3 rad);
	
	//// linear algebra ops
	// magnitude of vector
	f64 length (dv3 v);
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	f64 length_sqr (dv3 v);
	// distance between points, equivalent to length(a - b)
	f64 distance (dv3 a, dv3 b);
	// normalize vector so that it has length() = 1, undefined for zero vector
	dv3 normalize (dv3 v);
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	dv3 normalize_or_zero (dv3 v);
	// dot product
	f64 dot (dv3 l, dv3 r);
	// 3d cross product
	dv3 cross (dv3 l, dv3 r);
}// namespace vector

