// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "fm3.hpp"

#include "fm2.hpp"
#include "fm4.hpp"
#include "fm2x3.hpp"
#include "fm3x4.hpp"
#include "dm3.hpp"

namespace vector {
	
	//// Accessors
	
	
	f32 fm3::get (int r, int c) const {
		return arr[c][r];
	}
	
	fv3 fm3::get_column (int indx) const {
		return arr[indx];
	}
	
	fv3 fm3::get_row (int indx) const {
		return fv3(arr[0][indx], arr[1][indx], arr[2][indx]);
	}
	
	//// Constructors
	
	
	fm3::fm3 () {
		
	}
	
	fm3::fm3 (f32 all): 
	arr{
		fv3(all, all, all),
		fv3(all, all, all),
		fv3(all, all, all)} {
		
	}
	
	fm3::fm3 (
			f32 c00, f32 c01, f32 c02,
			f32 c10, f32 c11, f32 c12,
			f32 c20, f32 c21, f32 c22): 
	arr{
		fv3(c00, c10, c20),
		fv3(c01, c11, c21),
		fv3(c02, c12, c22)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	fm3 fm3::rows (fv3 row0, fv3 row1, fv3 row2) {
		return fm3(
				row0[0], row0[1], row0[2],
				row1[0], row1[1], row1[2],
				row2[0], row2[1], row2[2]);
	}
	
	fm3 fm3::rows (
			f32 c00, f32 c01, f32 c02,
			f32 c10, f32 c11, f32 c12,
			f32 c20, f32 c21, f32 c22) {
		return fm3(
				c00, c01, c02,
				c10, c11, c12,
				c20, c21, c22);
	}
	
	fm3 fm3::columns (fv3 col0, fv3 col1, fv3 col2) {
		return fm3(
				col0[0], col1[0], col2[0],
				col0[1], col1[1], col2[1],
				col0[2], col1[2], col2[2]);
	}
	
	fm3 fm3::columns (
			f32 c00, f32 c10, f32 c20,
			f32 c01, f32 c11, f32 c21,
			f32 c02, f32 c12, f32 c22) {
		return fm3(
				c00, c01, c02,
				c10, c11, c12,
				c20, c21, c22);
	}
	
	
	fm3 fm3::identity () {
		return fm3(
				1,0,0,
				0,1,0,
				0,0,1);
	}
	
	// Casting operators
	
	
	fm3::operator fm2 () {
		return fm2(
				arr[0][0], arr[1][0],
				arr[0][1], arr[1][1]);
	}
	
	fm3::operator fm4 () {
		return fm4(
				arr[0][0], arr[1][0], arr[2][0],         0,
				arr[0][1], arr[1][1], arr[2][1],         0,
				arr[0][2], arr[1][2], arr[2][2],         0,
				        0,         0,         0,         1);
	}
	
	fm3::operator fm2x3 () {
		return fm2x3(
				arr[0][0], arr[1][0], arr[2][0],
				arr[0][1], arr[1][1], arr[2][1]);
	}
	
	fm3::operator fm3x4 () {
		return fm3x4(
				arr[0][0], arr[1][0], arr[2][0],         0,
				arr[0][1], arr[1][1], arr[2][1],         0,
				arr[0][2], arr[1][2], arr[2][2],         0);
	}
	
	fm3::operator dm3 () {
		return dm3(
				(f64)arr[0][0], (f64)arr[0][1], (f64)arr[0][2],
				(f64)arr[1][0], (f64)arr[1][1], (f64)arr[1][2],
				(f64)arr[2][0], (f64)arr[2][1], (f64)arr[2][2]);
	}
	
	// Elementwise operators
	
	
	fm3 fm3::operator+ (fm3 m) {
		return fm3(
				+m.arr[0][0], +m.arr[1][0], +m.arr[2][0],
				+m.arr[0][1], +m.arr[1][1], +m.arr[2][1],
				+m.arr[0][2], +m.arr[1][2], +m.arr[2][2]);
	}
	
	fm3 fm3::operator- (fm3 m) {
		return fm3(
				-m.arr[0][0], -m.arr[1][0], -m.arr[2][0],
				-m.arr[0][1], -m.arr[1][1], -m.arr[2][1],
				-m.arr[0][2], -m.arr[1][2], -m.arr[2][2]);
	}
	
	fm3 operator+ (fm3 l, fm3 r) {
		return fm3(
				l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0],
				l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1],
				l.arr[0][2] + r.arr[0][2], l.arr[1][2] + r.arr[1][2], l.arr[2][2] + r.arr[2][2]);
	}
	
	fm3 operator- (fm3 l, fm3 r) {
		return fm3(
				l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0],
				l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1],
				l.arr[0][2] - r.arr[0][2], l.arr[1][2] - r.arr[1][2], l.arr[2][2] - r.arr[2][2]);
	}
	
	fm3 operator* (fm3 l, fm3 r) {
		return fm3(
				l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0],
				l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1],
				l.arr[0][2] * r.arr[0][2], l.arr[1][2] * r.arr[1][2], l.arr[2][2] * r.arr[2][2]);
	}
	
	fm3 operator/ (fm3 l, fm3 r) {
		return fm3(
				l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0],
				l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1],
				l.arr[0][2] / r.arr[0][2], l.arr[1][2] / r.arr[1][2], l.arr[2][2] / r.arr[2][2]);
	}
} // namespace vector

