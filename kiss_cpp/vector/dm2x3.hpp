// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"

#include "dv2.hpp"
#include "dv3.hpp"

namespace vector {
	
	//// matrix forward declarations
	struct dm2;
	struct dm3;
	struct dm4;
	struct dm3x4;
	struct fm2x3;
	
	struct dm2x3 {
		dv2 arr[3]; // column major for compatibility with OpenGL
		
		//// Accessors
		
		// get cell with r,c indecies (r=row, c=column)
		f64 const& get (int r, int c) const;
		// get matrix column
		dv2 const& get_column (int indx) const;
		// get matrix row
		dv3 get_row (int indx) const;
		
		//// Constructors
		
		dm2x3 ();
		// supply one value for all cells
		explicit dm2x3 (f64 all);
		// supply all cells, in row major order for readability -> c<r><c> (r=row, c=column)
		explicit dm2x3 (
				f64 c00, f64 c01, f64 c02,
				f64 c10, f64 c11, f64 c12);
		
		// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
		// supply all row vectors
		static dm2x3 rows (dv3 row0, dv3 row1);
		// supply all cells in row major order
		static dm2x3 rows (
				f64 c00, f64 c01, f64 c02,
				f64 c10, f64 c11, f64 c12);
		// supply all column vectors
		static dm2x3 columns (dv2 col0, dv2 col1, dv2 col2);
		// supply all cells in column major order
		static dm2x3 columns (
				f64 c00, f64 c10,
				f64 c01, f64 c11,
				f64 c02, f64 c12);
		
		// identity matrix
		static dm2x3 identity ();
		
		// Casting operators
		
		// extend/truncate matrix of other size
		operator dm2 ();
		// extend/truncate matrix of other size
		operator dm3 ();
		// extend/truncate matrix of other size
		operator dm4 ();
		// extend/truncate matrix of other size
		operator dm3x4 ();
		// typecast
		operator fm2x3 ();
		
		// Elementwise operators
		
		dm2x3& operator+= (f64 r);
		dm2x3& operator-= (f64 r);
		dm2x3& operator*= (f64 r);
		dm2x3& operator/= (f64 r);
		
		// Matrix multiplication
		
		dm2x3& operator*= (dm2x3 const& r);
	};
	
	// Elementwise operators
	
	dm2x3 operator+ (dm2x3 const& m);
	dm2x3 operator- (dm2x3 const& m);
	
	dm2x3 operator+ (dm2x3 const& l, dm2x3 const& r);
	dm2x3 operator+ (dm2x3 const& l, f64 r);
	dm2x3 operator+ (f64 l, dm2x3 const& r);
	
	dm2x3 operator- (dm2x3 const& l, dm2x3 const& r);
	dm2x3 operator- (dm2x3 const& l, f64 r);
	dm2x3 operator- (f64 l, dm2x3 const& r);
	
	dm2x3 mul_elementwise (dm2x3 const& l, dm2x3 const& r);
	dm2x3 operator* (dm2x3 const& l, f64 r);
	dm2x3 operator* (f64 l, dm2x3 const& r);
	
	dm2x3 div_elementwise (dm2x3 const& l, dm2x3 const& r);
	dm2x3 operator/ (dm2x3 const& l, f64 r);
	dm2x3 operator/ (f64 l, dm2x3 const& r);
	
	// Matrix multiplication
	
	dm2x3 operator* (dm2x3 const& l, dm3 const& r);
	// dm2x3 * dm3x4 -> 2x4 ; matrix not implemented
	dv2 operator* (dm2x3 const& l, dv3 r);
	dv3 operator* (dv2 l, dm2x3 const& r);
} // namespace vector

