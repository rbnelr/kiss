// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "dm3.hpp"

#include "dm2.hpp"
#include "dm4.hpp"
#include "dm2x3.hpp"
#include "dm3x4.hpp"
#include "fm3.hpp"

namespace vector {
	
	//// Accessors
	
	
	f64 const& dm3::get (int r, int c) const {
		return arr[c][r];
	}
	
	dv3 const& dm3::get_column (int indx) const {
		return arr[indx];
	}
	
	dv3 dm3::get_row (int indx) const {
		return dv3(arr[0][indx], arr[1][indx], arr[2][indx]);
	}
	
	//// Constructors
	
	
	dm3::dm3 () {
		
	}
	
	dm3::dm3 (f64 all): 
	arr{
		dv3(all, all, all),
		dv3(all, all, all),
		dv3(all, all, all)} {
		
	}
	
	dm3::dm3 (
			f64 c00, f64 c01, f64 c02,
			f64 c10, f64 c11, f64 c12,
			f64 c20, f64 c21, f64 c22): 
	arr{
		dv3(c00, c10, c20),
		dv3(c01, c11, c21),
		dv3(c02, c12, c22)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	dm3 dm3::rows (dv3 row0, dv3 row1, dv3 row2) {
		return dm3(
				row0[0], row0[1], row0[2],
				row1[0], row1[1], row1[2],
				row2[0], row2[1], row2[2]);
	}
	
	dm3 dm3::rows (
			f64 c00, f64 c01, f64 c02,
			f64 c10, f64 c11, f64 c12,
			f64 c20, f64 c21, f64 c22) {
		return dm3(
				c00, c01, c02,
				c10, c11, c12,
				c20, c21, c22);
	}
	
	dm3 dm3::columns (dv3 col0, dv3 col1, dv3 col2) {
		return dm3(
				col0[0], col1[0], col2[0],
				col0[1], col1[1], col2[1],
				col0[2], col1[2], col2[2]);
	}
	
	dm3 dm3::columns (
			f64 c00, f64 c10, f64 c20,
			f64 c01, f64 c11, f64 c21,
			f64 c02, f64 c12, f64 c22) {
		return dm3(
				c00, c01, c02,
				c10, c11, c12,
				c20, c21, c22);
	}
	
	
	dm3 dm3::identity () {
		return dm3(
				1,0,0,
				0,1,0,
				0,0,1);
	}
	
	// Casting operators
	
	
	dm3::operator dm2 () {
		return dm2(
				arr[0][0], arr[1][0],
				arr[0][1], arr[1][1]);
	}
	
	dm3::operator dm4 () {
		return dm4(
				arr[0][0], arr[1][0], arr[2][0],         0,
				arr[0][1], arr[1][1], arr[2][1],         0,
				arr[0][2], arr[1][2], arr[2][2],         0,
				        0,         0,         0,         1);
	}
	
	dm3::operator dm2x3 () {
		return dm2x3(
				arr[0][0], arr[1][0], arr[2][0],
				arr[0][1], arr[1][1], arr[2][1]);
	}
	
	dm3::operator dm3x4 () {
		return dm3x4(
				arr[0][0], arr[1][0], arr[2][0],         0,
				arr[0][1], arr[1][1], arr[2][1],         0,
				arr[0][2], arr[1][2], arr[2][2],         0);
	}
	
	dm3::operator fm3 () {
		return fm3(
				(f32)arr[0][0], (f32)arr[0][1], (f32)arr[0][2],
				(f32)arr[1][0], (f32)arr[1][1], (f32)arr[1][2],
				(f32)arr[2][0], (f32)arr[2][1], (f32)arr[2][2]);
	}
	
	// Elementwise operators
	
	
	dm3& dm3::operator+= (f64 r) {
		*this = *this + r;
		return *this;
	}
	
	dm3& dm3::operator-= (f64 r) {
		*this = *this - r;
		return *this;
	}
	
	dm3& dm3::operator*= (f64 r) {
		*this = *this * r;
		return *this;
	}
	
	dm3& dm3::operator/= (f64 r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	dm3& dm3::operator*= (dm3 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Elementwise operators
	
	
	dm3 operator+ (dm3 const& m) {
		return dm3(
				+m.arr[0][0], +m.arr[1][0], +m.arr[2][0],
				+m.arr[0][1], +m.arr[1][1], +m.arr[2][1],
				+m.arr[0][2], +m.arr[1][2], +m.arr[2][2]);
	}
	
	dm3 operator- (dm3 const& m) {
		return dm3(
				-m.arr[0][0], -m.arr[1][0], -m.arr[2][0],
				-m.arr[0][1], -m.arr[1][1], -m.arr[2][1],
				-m.arr[0][2], -m.arr[1][2], -m.arr[2][2]);
	}
	
	
	dm3 operator+ (dm3 const& l, dm3 const& r) {
		return dm3(
				l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0],
				l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1],
				l.arr[0][2] + r.arr[0][2], l.arr[1][2] + r.arr[1][2], l.arr[2][2] + r.arr[2][2]);
	}
	
	dm3 operator+ (dm3 const& l, f64 r) {
		return dm3(
				l.arr[0][0] + r, l.arr[1][0] + r, l.arr[2][0] + r,
				l.arr[0][1] + r, l.arr[1][1] + r, l.arr[2][1] + r,
				l.arr[0][2] + r, l.arr[1][2] + r, l.arr[2][2] + r);
	}
	
	dm3 operator+ (f64 l, dm3 const& r) {
		return dm3(
				l + r.arr[0][0], l + r.arr[1][0], l + r.arr[2][0],
				l + r.arr[0][1], l + r.arr[1][1], l + r.arr[2][1],
				l + r.arr[0][2], l + r.arr[1][2], l + r.arr[2][2]);
	}
	
	
	dm3 operator- (dm3 const& l, dm3 const& r) {
		return dm3(
				l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0],
				l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1],
				l.arr[0][2] - r.arr[0][2], l.arr[1][2] - r.arr[1][2], l.arr[2][2] - r.arr[2][2]);
	}
	
	dm3 operator- (dm3 const& l, f64 r) {
		return dm3(
				l.arr[0][0] - r, l.arr[1][0] - r, l.arr[2][0] - r,
				l.arr[0][1] - r, l.arr[1][1] - r, l.arr[2][1] - r,
				l.arr[0][2] - r, l.arr[1][2] - r, l.arr[2][2] - r);
	}
	
	dm3 operator- (f64 l, dm3 const& r) {
		return dm3(
				l - r.arr[0][0], l - r.arr[1][0], l - r.arr[2][0],
				l - r.arr[0][1], l - r.arr[1][1], l - r.arr[2][1],
				l - r.arr[0][2], l - r.arr[1][2], l - r.arr[2][2]);
	}
	
	
	dm3 mul_elementwise (dm3 const& l, dm3 const& r) {
		return dm3(
				l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0],
				l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1],
				l.arr[0][2] * r.arr[0][2], l.arr[1][2] * r.arr[1][2], l.arr[2][2] * r.arr[2][2]);
	}
	
	dm3 operator* (dm3 const& l, f64 r) {
		return dm3(
				l.arr[0][0] * r, l.arr[1][0] * r, l.arr[2][0] * r,
				l.arr[0][1] * r, l.arr[1][1] * r, l.arr[2][1] * r,
				l.arr[0][2] * r, l.arr[1][2] * r, l.arr[2][2] * r);
	}
	
	dm3 operator* (f64 l, dm3 const& r) {
		return dm3(
				l * r.arr[0][0], l * r.arr[1][0], l * r.arr[2][0],
				l * r.arr[0][1], l * r.arr[1][1], l * r.arr[2][1],
				l * r.arr[0][2], l * r.arr[1][2], l * r.arr[2][2]);
	}
	
	
	dm3 div_elementwise (dm3 const& l, dm3 const& r) {
		return dm3(
				l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0],
				l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1],
				l.arr[0][2] / r.arr[0][2], l.arr[1][2] / r.arr[1][2], l.arr[2][2] / r.arr[2][2]);
	}
	
	dm3 operator/ (dm3 const& l, f64 r) {
		return dm3(
				l.arr[0][0] / r, l.arr[1][0] / r, l.arr[2][0] / r,
				l.arr[0][1] / r, l.arr[1][1] / r, l.arr[2][1] / r,
				l.arr[0][2] / r, l.arr[1][2] / r, l.arr[2][2] / r);
	}
	
	dm3 operator/ (f64 l, dm3 const& r) {
		return dm3(
				l / r.arr[0][0], l / r.arr[1][0], l / r.arr[2][0],
				l / r.arr[0][1], l / r.arr[1][1], l / r.arr[2][1],
				l / r.arr[0][2], l / r.arr[1][2], l / r.arr[2][2]);
	}
	
	// Matrix multiplication
	
	
	dm3 operator* (dm3 const& l, dm3 const& r) {
		dm3 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		return ret;
	}
	
	dm3x4 operator* (dm3 const& l, dm3x4 const& r) {
		dm3x4 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		ret.arr[3] = l * r.arr[3];
		return ret;
	}
	
	dv3 operator* (dm3 const& l, dv3 r) {
		dv3 ret;
		ret.x = l.arr[0].x * r.x + l.arr[1].x * r.y + l.arr[2].x * r.z;
		ret.y = l.arr[0].y * r.x + l.arr[1].y * r.y + l.arr[2].y * r.z;
		ret.z = l.arr[0].z * r.x + l.arr[1].z * r.y + l.arr[2].z * r.z;
		return ret;
	}
	
	dv3 operator* (dv3 l, dm3 const& r) {
		dv3 ret;
		ret.x = l.x * r.arr[0].x + l.y * r.arr[0].y + l.z * r.arr[0].z;
		ret.y = l.x * r.arr[1].x + l.y * r.arr[1].y + l.z * r.arr[1].z;
		ret.z = l.x * r.arr[2].x + l.y * r.arr[2].y + l.z * r.arr[2].z;
		return ret;
	}
} // namespace vector

