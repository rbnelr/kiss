// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "u8v4.hpp"

#include "u8v2.hpp"
#include "u8v3.hpp"
#include "bv4.hpp"
#include "bv4.hpp"
#include "fv4.hpp"
#include "dv4.hpp"
#include "iv4.hpp"
#include "s64v4.hpp"

namespace vector {
	
	u8& u8v4::operator[] (int i) {
		return arr[i];
	}
	
	u8 const& u8v4::operator[] (int i) const {
		return arr[i];
	}
	
	
	u8v4::u8v4 () {
		
	}
	
	// sets all components to one value
	// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
	u8v4::u8v4 (u8 all): x{all}, y{all}, z{all}, w{all} {
		
	}
	
	// supply all components
	u8v4::u8v4 (u8 x, u8 y, u8 z, u8 w): x{x}, y{y}, z{z}, w{w} {
		
	}
	
	// extend vector
	u8v4::u8v4 (u8v2 xy, u8 z, u8 w): x{xy.x}, y{xy.y}, z{z}, w{w} {
		
	}
	
	// extend vector
	u8v4::u8v4 (u8v3 xyz, u8 w): x{xyz.x}, y{xyz.y}, z{xyz.z}, w{w} {
		
	}
	
	//// Truncating cast operators
	
	
	u8v4::operator u8v2 () const {
		return u8v2(x, y);
	}
	
	u8v4::operator u8v3 () const {
		return u8v3(x, y, z);
	}
	
	//// Type cast operators
	
	
	u8v4::operator bv4 () const {
		return bv4((bool)x, (bool)y, (bool)z, (bool)w);
	}
	
	u8v4::operator fv4 () const {
		return fv4((f32)x, (f32)y, (f32)z, (f32)w);
	}
	
	u8v4::operator dv4 () const {
		return dv4((f64)x, (f64)y, (f64)z, (f64)w);
	}
	
	u8v4::operator iv4 () const {
		return iv4((s32)x, (s32)y, (s32)z, (s32)w);
	}
	
	u8v4::operator s64v4 () const {
		return s64v4((s64)x, (s64)y, (s64)z, (s64)w);
	}
	
	
	u8v4 u8v4::operator+= (u8v4 r) {
		x += r.x;
		y += r.y;
		z += r.z;
		w += r.w;
		return *this;
	}
	
	u8v4 u8v4::operator-= (u8v4 r) {
		x -= r.x;
		y -= r.y;
		z -= r.z;
		w -= r.w;
		return *this;
	}
	
	u8v4 u8v4::operator*= (u8v4 r) {
		x *= r.x;
		y *= r.y;
		z *= r.z;
		w *= r.w;
		return *this;
	}
	
	u8v4 u8v4::operator/= (u8v4 r) {
		x /= r.x;
		y /= r.y;
		z /= r.z;
		w /= r.w;
		return *this;
	}
	
	//// arthmethic ops
	
	u8v4 operator+ (u8v4 v) {
		return u8v4(+v.x, +v.y, +v.z, +v.w);
	}
	
	u8v4 operator- (u8v4 v) {
		return u8v4(-v.x, -v.y, -v.z, -v.w);
	}
	
	u8v4 operator+ (u8v4 l, u8v4 r) {
		return u8v4(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w);
	}
	
	u8v4 operator- (u8v4 l, u8v4 r) {
		return u8v4(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w);
	}
	
	u8v4 operator* (u8v4 l, u8v4 r) {
		return u8v4(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w);
	}
	
	u8v4 operator/ (u8v4 l, u8v4 r) {
		return u8v4(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w);
	}
	
	//// comparison ops
	
	bv4 operator< (u8v4 l, u8v4 r) {
		return bv4(l.x < r.x, l.y < r.y, l.z < r.z, l.w < r.w);
	}
	
	bv4 operator<= (u8v4 l, u8v4 r) {
		return bv4(l.x <= r.x, l.y <= r.y, l.z <= r.z, l.w <= r.w);
	}
	
	bv4 operator> (u8v4 l, u8v4 r) {
		return bv4(l.x > r.x, l.y > r.y, l.z > r.z, l.w > r.w);
	}
	
	bv4 operator>= (u8v4 l, u8v4 r) {
		return bv4(l.x >= r.x, l.y >= r.y, l.z >= r.z, l.w >= r.w);
	}
	
	bv4 operator== (u8v4 l, u8v4 r) {
		return bv4(l.x == r.x, l.y == r.y, l.z == r.z, l.w == r.w);
	}
	
	bv4 operator!= (u8v4 l, u8v4 r) {
		return bv4(l.x != r.x, l.y != r.y, l.z != r.z, l.w != r.w);
	}
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (u8v4 l, u8v4 r) {
		return all(l == r);
	}
	
	// componentwise ternary c ? l : r
	u8v4 select (bv4 c, u8v4 l, u8v4 r) {
		return c.x ? l.x : r.x, c.y ? l.y : r.y, c.z ? l.z : r.z, c.w ? l.w : r.w;
	}
	
	//// misc ops
	
	u8v4 abs (u8v4 v) {
		return u8v4(abs(v.x), abs(v.y), abs(v.z), abs(v.w));
	}
	
	u8v4 min (u8v4 l, u8v4 r) {
		return u8v4(min(l.x,r.x), min(l.y,r.y), min(l.z,r.z), min(l.w,r.w));
	}
	
	u8v4 max (u8v4 l, u8v4 r) {
		return u8v4(max(l.x,r.x), max(l.y,r.y), max(l.z,r.z), max(l.w,r.w));
	}
	
	u8v4 clamp (u8v4 x, u8v4 a, u8v4 b) {
		return min(max(x,a), b);
	}
	
	// get min component of vector, optionally get component index via min_index
	u8 min_component (u8v4 v, int* min_index) {
		int index = 0;
		u8 min_val = v.x;	
		for (int i=1; i<4; ++i) {
			if (v.arr[i] <= min_val) {
				index = i;
				min_val = v.arr[i];
			}
		}
		if (min_index) *min_index = index;
		return min_val;
	}
	
	// get max component of vector, optionally get component index via max_index
	u8 max_component (u8v4 v, int* max_index) {
		int index = 0;
		u8 max_val = v.x;	
		for (int i=1; i<4; ++i) {
			if (v.arr[i] >= max_val) {
				index = i;
				max_val = v.arr[i];
			}
		}
		if (max_index) *max_index = index;
		return max_val;
	}
	
	
	u8v4 wrap (u8v4 v, u8v4 range) {
		return u8v4(wrap(v.x,range.x), wrap(v.y,range.y), wrap(v.z,range.z), wrap(v.w,range.w));
	}
	
	u8v4 wrap (u8v4 v, u8v4 a, u8v4 b) {
		return u8v4(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y), wrap(v.z,a.z,b.z), wrap(v.w,a.w,b.w));
	}
	
	
	fv4 to_rad (u8v4 deg) {
		return (fv4)deg * DEG_TO_RAD;
	}
	
	// degress "literal", converts degrees to radiants
	fv4 deg (u8v4 deg) {
		return (fv4)deg * DEG_TO_RAD;
	}
	
	fv4 to_deg (u8v4 rad) {
		return (fv4)rad * RAD_TO_DEG;
	}
	
	//// linear algebra ops
	
	// magnitude of vector
	f32 length (u8v4 v) {
		return sqrt((f32)(v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w));
	}
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	u8 length_sqr (u8v4 v) {
		return v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w;
	}
	
	// distance between points, equivalent to length(a - b)
	f32 distance (u8v4 a, u8v4 b) {
		return length(a - b);
	}
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	fv4 normalize (u8v4 v) {
		return fv4(v) / length(v);
	}
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	fv4 normalize_or_zero (u8v4 v) {
		f32 len = length(v);
		if (len == f32(0)) {
			return f32(0);
		}
		return fv4(v) / fv4(len);
	}
	
	// dot product
	u8 dot (u8v4 l, u8v4 r) {
		return l.x * r.x + l.y * r.y + l.z * r.z + l.w * r.w;
	}
}// namespace vector

