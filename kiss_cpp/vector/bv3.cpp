// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "bv3.hpp"

#include "bv2.hpp"
#include "bv4.hpp"
#include "bv3.hpp"

bool& bv3::operator[] (int i) {
	return arr[i];
}

bool bv3::operator[] (int i) const {
	return arr[i];
}


bv3::bv3 () {
	
}

constexpr bv3::bv3 (bool all): x{all}, y{all}, z{all} {
	
}

constexpr bv3::bv3 (bool x, bool y, bool z): x{x}, y{y}, z{z} {
	
}

constexpr bv3::bv3 (bv2 xy, bool z): x{xy.x}, y{xy.y}, z{z} {
	
}

constexpr bv3::bv3 (bv4 v): x{v.x}, y{v.y}, z{v.z} {
	
}


//// reducing ops

constexpr bool all (bv3 v) {
	return v.x && v.y && v.z;
}

constexpr bool any (bv3 v) {
	return v.x || v.y || v.z;
}

//// arthmethic ops

constexpr bv3 operator! (bv3 v) {
	return bv3(!v.x, !v.y, !v.z);
}

constexpr bv3 operator&& (bv3 l, bv3 r) {
	return bv3(l.x && r.x, l.y && r.y, l.z && r.z);
}

constexpr bv3 operator|| (bv3 l, bv3 r) {
	return bv3(l.x || r.x, l.y || r.y, l.z || r.z);
}

//// comparison ops

constexpr bv3 operator== (bv3 l, bv3 r) {
	return bv3(l.x == r.x, l.y == r.y, l.z == r.z);
}

constexpr bv3 operator!= (bv3 l, bv3 r) {
	return bv3(l.x != r.x, l.y != r.y, l.z != r.z);
}

constexpr bool equal (bv3 l, bv3 r) {
	return all(l == r);
}

constexpr bv3 select (bv3 c, bv3 l, bv3 r) {
	return c.x ? l.x : r.x, c.y ? l.y : r.y, c.z ? l.z : r.z;
}

