// fv4.hpp generated by vector_srcgen.py
#pragma once

#include "kissmath.hpp"

// forward declarations for conversion operators
union iv4;
union u8v4;

union fv4 {
	struct {
		f32	x, y, z, w;
	};
	f32		arr[4];

	inline f32& operator[] (int i) {
		return arr[i];
	}

	inline fv4 () {
	
	}

	inline constexpr fv4 (f32 all): x{all}, y{all}, z{all}, w{all} {
	
	}

	inline constexpr fv4 (f32 x, f32 y, f32 z, f32 w): x{x}, y{y}, z{z}, w{w} {
	
	}

	inline fv4 operator+= (fv4 r) {
		x += r.x;
		y += r.y;
		z += r.z;
		w += r.w;
		return *this;
	}
	inline fv4 operator-= (fv4 r) {
		x -= r.x;
		y -= r.y;
		z -= r.z;
		w -= r.w;
		return *this;
	}
	inline fv4 operator*= (fv4 r) {
		x *= r.x;
		y *= r.y;
		z *= r.z;
		w *= r.w;
		return *this;
	}
	inline fv4 operator/= (fv4 r) {
		x /= r.x;
		y /= r.y;
		z /= r.z;
		w /= r.w;
		return *this;
	}

	operator iv4 ();
	operator u8v4 ();
};

