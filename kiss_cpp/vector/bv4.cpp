// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "bv4.hpp"

#include "bv2.hpp"
#include "bv3.hpp"
#include "bv4.hpp"
#include "fv4.hpp"
#include "dv4.hpp"
#include "iv4.hpp"
#include "s64v4.hpp"
#include "u8v4.hpp"

namespace vector {
	
	bool& bv4::operator[] (int i) {
		return arr[i];
	}
	
	bool const& bv4::operator[] (int i) const {
		return arr[i];
	}
	
	
	bv4::bv4 () {
		
	}
	
	// sets all components to one value
	// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
	bv4::bv4 (bool all): x{all}, y{all}, z{all}, w{all} {
		
	}
	
	// supply all components
	bv4::bv4 (bool x, bool y, bool z, bool w): x{x}, y{y}, z{z}, w{w} {
		
	}
	
	// extend vector
	bv4::bv4 (bv2 xy, bool z, bool w): x{xy.x}, y{xy.y}, z{z}, w{w} {
		
	}
	
	// extend vector
	bv4::bv4 (bv3 xyz, bool w): x{xyz.x}, y{xyz.y}, z{xyz.z}, w{w} {
		
	}
	
	//// Truncating cast operators
	
	
	bv4::operator bv2 () const {
		return bv2(x, y);
	}
	
	bv4::operator bv3 () const {
		return bv3(x, y, z);
	}
	
	//// Type cast operators
	
	
	//// reducing ops
	
	// all components are true
	bool all (bv4 v) {
		return v.x && v.y && v.z && v.w;
	}
	
	// any components is true
	bool any (bv4 v) {
		return v.x || v.y || v.z || v.w;
	}
	
	//// arthmethic ops
	
	bv4 operator! (bv4 v) {
		return bv4(!v.x, !v.y, !v.z, !v.w);
	}
	
	bv4 operator&& (bv4 l, bv4 r) {
		return bv4(l.x && r.x, l.y && r.y, l.z && r.z, l.w && r.w);
	}
	
	bv4 operator|| (bv4 l, bv4 r) {
		return bv4(l.x || r.x, l.y || r.y, l.z || r.z, l.w || r.w);
	}
	
	//// comparison ops
	
	bv4 operator== (bv4 l, bv4 r) {
		return bv4(l.x == r.x, l.y == r.y, l.z == r.z, l.w == r.w);
	}
	
	bv4 operator!= (bv4 l, bv4 r) {
		return bv4(l.x != r.x, l.y != r.y, l.z != r.z, l.w != r.w);
	}
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (bv4 l, bv4 r) {
		return all(l == r);
	}
	
	// componentwise ternary c ? l : r
	bv4 select (bv4 c, bv4 l, bv4 r) {
		return c.x ? l.x : r.x, c.y ? l.y : r.y, c.z ? l.z : r.z, c.w ? l.w : r.w;
	}
}// namespace vector

