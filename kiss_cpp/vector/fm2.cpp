// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "fm2.hpp"

#include "fm3.hpp"
#include "fm4.hpp"
#include "fm2x3.hpp"
#include "fm3x4.hpp"
#include "dm2.hpp"

namespace vector {
	
	//// Accessors
	
	
	// get matrix row
	fv2 fm2::get_row (int indx) const {
		return fv2(arr[0][indx], arr[1][indx]);
	}
	
	//// Constructors
	
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	// supply all row vectors
	fm2 fm2::rows (fv2 row0, fv2 row1) {
		return fm2(row0[0], row0[1],
				   row1[0], row1[1]);
	}
	
	// supply all cells in row major order
	fm2 fm2::rows (f32 c00, f32 c01,
				   f32 c10, f32 c11) {
		return fm2(c00, c01,
				   c10, c11);
	}
	
	// supply all column vectors
	fm2 fm2::columns (fv2 col0, fv2 col1) {
		return fm2(col0[0], col1[0],
				   col0[1], col1[1]);
	}
	
	// supply all cells in column major order
	fm2 fm2::columns (f32 c00, f32 c10,
					  f32 c01, f32 c11) {
		return fm2(c00, c01,
				   c10, c11);
	}
	
	
	// Casting operators
	
	
	// extend/truncate matrix of other size
	fm2::operator fm3 () const {
		return fm3(arr[0][0], arr[1][0],         0,
				   arr[0][1], arr[1][1],         0,
				           0,         0,         1);
	}
	
	// extend/truncate matrix of other size
	fm2::operator fm4 () const {
		return fm4(arr[0][0], arr[1][0],         0,         0,
				   arr[0][1], arr[1][1],         0,         0,
				           0,         0,         1,         0,
				           0,         0,         0,         1);
	}
	
	// extend/truncate matrix of other size
	fm2::operator fm2x3 () const {
		return fm2x3(arr[0][0], arr[1][0],         0,
					 arr[0][1], arr[1][1],         0);
	}
	
	// extend/truncate matrix of other size
	fm2::operator fm3x4 () const {
		return fm3x4(arr[0][0], arr[1][0],         0,         0,
					 arr[0][1], arr[1][1],         0,         0,
					         0,         0,         1,         0);
	}
	
	// typecast
	fm2::operator dm2 () const {
		return dm2((f64)arr[0][0], (f64)arr[0][1],
				   (f64)arr[1][0], (f64)arr[1][1]);
	}
	
	// Elementwise operators
	
	
	fm2& fm2::operator+= (f32 r) {
		*this = *this + r;
		return *this;
	}
	
	fm2& fm2::operator-= (f32 r) {
		*this = *this - r;
		return *this;
	}
	
	fm2& fm2::operator*= (f32 r) {
		*this = *this * r;
		return *this;
	}
	
	fm2& fm2::operator/= (f32 r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	fm2& fm2::operator*= (fm2 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Elementwise operators
	
	
	fm2 operator+ (fm2 const& m) {
		return fm2(+m.arr[0][0], +m.arr[1][0],
				   +m.arr[0][1], +m.arr[1][1]);
	}
	
	fm2 operator- (fm2 const& m) {
		return fm2(-m.arr[0][0], -m.arr[1][0],
				   -m.arr[0][1], -m.arr[1][1]);
	}
	
	
	fm2 operator+ (fm2 const& l, fm2 const& r) {
		return fm2(l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0],
				   l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1]);
	}
	
	fm2 operator+ (fm2 const& l, f32 r) {
		return fm2(l.arr[0][0] + r, l.arr[1][0] + r,
				   l.arr[0][1] + r, l.arr[1][1] + r);
	}
	
	fm2 operator+ (f32 l, fm2 const& r) {
		return fm2(l + r.arr[0][0], l + r.arr[1][0],
				   l + r.arr[0][1], l + r.arr[1][1]);
	}
	
	
	fm2 operator- (fm2 const& l, fm2 const& r) {
		return fm2(l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0],
				   l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1]);
	}
	
	fm2 operator- (fm2 const& l, f32 r) {
		return fm2(l.arr[0][0] - r, l.arr[1][0] - r,
				   l.arr[0][1] - r, l.arr[1][1] - r);
	}
	
	fm2 operator- (f32 l, fm2 const& r) {
		return fm2(l - r.arr[0][0], l - r.arr[1][0],
				   l - r.arr[0][1], l - r.arr[1][1]);
	}
	
	
	fm2 mul_elementwise (fm2 const& l, fm2 const& r) {
		return fm2(l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0],
				   l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1]);
	}
	
	fm2 operator* (fm2 const& l, f32 r) {
		return fm2(l.arr[0][0] * r, l.arr[1][0] * r,
				   l.arr[0][1] * r, l.arr[1][1] * r);
	}
	
	fm2 operator* (f32 l, fm2 const& r) {
		return fm2(l * r.arr[0][0], l * r.arr[1][0],
				   l * r.arr[0][1], l * r.arr[1][1]);
	}
	
	
	fm2 div_elementwise (fm2 const& l, fm2 const& r) {
		return fm2(l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0],
				   l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1]);
	}
	
	fm2 operator/ (fm2 const& l, f32 r) {
		return fm2(l.arr[0][0] / r, l.arr[1][0] / r,
				   l.arr[0][1] / r, l.arr[1][1] / r);
	}
	
	fm2 operator/ (f32 l, fm2 const& r) {
		return fm2(l / r.arr[0][0], l / r.arr[1][0],
				   l / r.arr[0][1], l / r.arr[1][1]);
	}
	
	// Matrix ops
	
	
	fm2 operator* (fm2 const& l, fm2 const& r) {
		fm2 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		return ret;
	}
	
	fm2x3 operator* (fm2 const& l, fm2x3 const& r) {
		fm2x3 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		return ret;
	}
	
	fv2 operator* (fm2 const& l, fv2 r) {
		fv2 ret;
		ret.x = l.arr[0].x * r.x + l.arr[1].x * r.y;
		ret.y = l.arr[0].y * r.x + l.arr[1].y * r.y;
		return ret;
	}
	
	fv2 operator* (fv2 l, fm2 const& r) {
		fv2 ret;
		ret.x = l.x * r.arr[0].x + l.y * r.arr[0].y;
		ret.y = l.x * r.arr[1].x + l.y * r.arr[1].y;
		return ret;
	}
	
	fm2 transpose (fm2 const& m) {
		return fm2::rows(m.arr[0], m.arr[1]);
	}
	
	#define LETTERIFY \
	f32 a = mat.arr[0][0]; \
	f32 b = mat.arr[0][1]; \
	f32 c = mat.arr[1][0]; \
	f32 d = mat.arr[1][1];
	
	f32 det (fm2 const& mat) {
		// optimized from:  // 2 muls, 1 adds, 0 divs = 3 ops
		// to:              // 2 muls, 1 adds, 0 divs = 3 ops
		LETTERIFY
		
		return a*d - b*c;
	}
	
	fm2 inverse (fm2 const& mat) {
		// optimized from:  // 6 muls, 2 adds, 1 divs = 9 ops
		// to:              // 6 muls, 2 adds, 1 divs = 9 ops
		LETTERIFY
		
		f32 det;
		{ // clac determinate
			det = a*d - b*c;
		}
		f32 inv_det = f32(1) / det;
		f32 ninv_det = -inv_det;
		
		// calc cofactor matrix
		
		f32 cofac_00 = d;
		f32 cofac_01 = c;
		f32 cofac_10 = b;
		f32 cofac_11 = a;
		
		fm2 ret;
		
		ret.arr[0][0] = cofac_00 *  inv_det;
		ret.arr[0][1] = cofac_10 * ninv_det;
		ret.arr[1][0] = cofac_01 * ninv_det;
		ret.arr[1][1] = cofac_11 *  inv_det;
		
		return ret;
	}
	
	#undef LETTERIFY
	
} // namespace vector

