// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "fm2.hpp"

#include "fm3.hpp"
#include "fm4.hpp"
#include "fm2x3.hpp"
#include "fm3x4.hpp"
#include "dm2.hpp"

namespace vector {
	
	//// Accessors
	
	
	f32 const& fm2::get (int r, int c) const {
		return arr[c][r];
	}
	
	fv2 const& fm2::get_column (int indx) const {
		return arr[indx];
	}
	
	fv2 fm2::get_row (int indx) const {
		return fv2(arr[0][indx], arr[1][indx]);
	}
	
	//// Constructors
	
	
	fm2::fm2 () {
		
	}
	
	fm2::fm2 (f32 all): 
	arr{
		fv2(all, all),
		fv2(all, all)} {
		
	}
	
	fm2::fm2 (
			f32 c00, f32 c01,
			f32 c10, f32 c11): 
	arr{
		fv2(c00, c10),
		fv2(c01, c11)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	fm2 fm2::rows (fv2 row0, fv2 row1) {
		return fm2(
				row0[0], row0[1],
				row1[0], row1[1]);
	}
	
	fm2 fm2::rows (
			f32 c00, f32 c01,
			f32 c10, f32 c11) {
		return fm2(
				c00, c01,
				c10, c11);
	}
	
	fm2 fm2::columns (fv2 col0, fv2 col1) {
		return fm2(
				col0[0], col1[0],
				col0[1], col1[1]);
	}
	
	fm2 fm2::columns (
			f32 c00, f32 c10,
			f32 c01, f32 c11) {
		return fm2(
				c00, c01,
				c10, c11);
	}
	
	
	fm2 fm2::identity () {
		return fm2(
				1,0,
				0,1);
	}
	
	// Casting operators
	
	
	fm2::operator fm3 () {
		return fm3(
				arr[0][0], arr[1][0],         0,
				arr[0][1], arr[1][1],         0,
				        0,         0,         1);
	}
	
	fm2::operator fm4 () {
		return fm4(
				arr[0][0], arr[1][0],         0,         0,
				arr[0][1], arr[1][1],         0,         0,
				        0,         0,         1,         0,
				        0,         0,         0,         1);
	}
	
	fm2::operator fm2x3 () {
		return fm2x3(
				arr[0][0], arr[1][0],         0,
				arr[0][1], arr[1][1],         0);
	}
	
	fm2::operator fm3x4 () {
		return fm3x4(
				arr[0][0], arr[1][0],         0,         0,
				arr[0][1], arr[1][1],         0,         0,
				        0,         0,         1,         0);
	}
	
	fm2::operator dm2 () {
		return dm2(
				(f64)arr[0][0], (f64)arr[0][1],
				(f64)arr[1][0], (f64)arr[1][1]);
	}
	
	// Elementwise operators
	
	
	fm2& fm2::operator+= (f32 r) {
		*this = *this + r;
		return *this;
	}
	
	fm2& fm2::operator-= (f32 r) {
		*this = *this - r;
		return *this;
	}
	
	fm2& fm2::operator*= (f32 r) {
		*this = *this * r;
		return *this;
	}
	
	fm2& fm2::operator/= (f32 r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	fm2& fm2::operator*= (fm2 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Elementwise operators
	
	
	fm2 operator+ (fm2 const& m) {
		return fm2(
				+m.arr[0][0], +m.arr[1][0],
				+m.arr[0][1], +m.arr[1][1]);
	}
	
	fm2 operator- (fm2 const& m) {
		return fm2(
				-m.arr[0][0], -m.arr[1][0],
				-m.arr[0][1], -m.arr[1][1]);
	}
	
	
	fm2 operator+ (fm2 const& l, fm2 const& r) {
		return fm2(
				l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0],
				l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1]);
	}
	
	fm2 operator+ (fm2 const& l, f32 r) {
		return fm2(
				l.arr[0][0] + r, l.arr[1][0] + r,
				l.arr[0][1] + r, l.arr[1][1] + r);
	}
	
	fm2 operator+ (f32 l, fm2 const& r) {
		return fm2(
				l + r.arr[0][0], l + r.arr[1][0],
				l + r.arr[0][1], l + r.arr[1][1]);
	}
	
	
	fm2 operator- (fm2 const& l, fm2 const& r) {
		return fm2(
				l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0],
				l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1]);
	}
	
	fm2 operator- (fm2 const& l, f32 r) {
		return fm2(
				l.arr[0][0] - r, l.arr[1][0] - r,
				l.arr[0][1] - r, l.arr[1][1] - r);
	}
	
	fm2 operator- (f32 l, fm2 const& r) {
		return fm2(
				l - r.arr[0][0], l - r.arr[1][0],
				l - r.arr[0][1], l - r.arr[1][1]);
	}
	
	
	fm2 mul_elementwise (fm2 const& l, fm2 const& r) {
		return fm2(
				l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0],
				l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1]);
	}
	
	fm2 operator* (fm2 const& l, f32 r) {
		return fm2(
				l.arr[0][0] * r, l.arr[1][0] * r,
				l.arr[0][1] * r, l.arr[1][1] * r);
	}
	
	fm2 operator* (f32 l, fm2 const& r) {
		return fm2(
				l * r.arr[0][0], l * r.arr[1][0],
				l * r.arr[0][1], l * r.arr[1][1]);
	}
	
	
	fm2 div_elementwise (fm2 const& l, fm2 const& r) {
		return fm2(
				l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0],
				l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1]);
	}
	
	fm2 operator/ (fm2 const& l, f32 r) {
		return fm2(
				l.arr[0][0] / r, l.arr[1][0] / r,
				l.arr[0][1] / r, l.arr[1][1] / r);
	}
	
	fm2 operator/ (f32 l, fm2 const& r) {
		return fm2(
				l / r.arr[0][0], l / r.arr[1][0],
				l / r.arr[0][1], l / r.arr[1][1]);
	}
	
	// Matrix multiplication
	
	
	fm2 operator* (fm2 const& l, fm2 const& r) {
		fm2 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		return ret;
	}
	
	fm2x3 operator* (fm2 const& l, fm2x3 const& r) {
		fm2x3 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		return ret;
	}
	
	fv2 operator* (fm2 const& l, fv2 r) {
		fv2 ret;
		ret.x = l.arr[0].x * r.x + l.arr[1].x * r.y;
		ret.y = l.arr[0].y * r.x + l.arr[1].y * r.y;
		return ret;
	}
	
	fv2 operator* (fv2 l, fm2 const& r) {
		fv2 ret;
		ret.x = l.x * r.arr[0].x + l.y * r.arr[0].y;
		ret.y = l.x * r.arr[1].x + l.y * r.arr[1].y;
		return ret;
	}
} // namespace vector

