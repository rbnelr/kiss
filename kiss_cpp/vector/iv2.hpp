// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"


namespace vector {
	//// forward declarations
	union iv3;
	union iv4;
	union bv2;
	union bv2;
	union fv2;
	union dv2;
	union s64v2;
	union u8v2;
	
	union iv2 {
		struct {
			s32	x, y;
		};
		s32		arr[2];
		
		s32& operator[] (int i);
		s32 const& operator[] (int i) const;
		
		iv2 ();
		// sets all components to one value
		// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
		iv2 (s32 all);
		// supply all components
		iv2 (s32 x, s32 y);
		// truncate vector
		iv2 (iv3 v);
		// truncate vector
		iv2 (iv4 v);
		
		//// Truncating cast operators
		
		
		//// Type cast operators
		
		explicit operator bv2 () const;
		explicit operator fv2 () const;
		explicit operator dv2 () const;
		explicit operator s64v2 () const;
		explicit operator u8v2 () const;
		
		iv2 operator+= (iv2 r);
		iv2 operator-= (iv2 r);
		iv2 operator*= (iv2 r);
		iv2 operator/= (iv2 r);
	};
	
	//// arthmethic ops
	iv2 operator+ (iv2 v);
	iv2 operator- (iv2 v);
	iv2 operator+ (iv2 l, iv2 r);
	iv2 operator- (iv2 l, iv2 r);
	iv2 operator* (iv2 l, iv2 r);
	iv2 operator/ (iv2 l, iv2 r);
	
	//// comparison ops
	bv2 operator< (iv2 l, iv2 r);
	bv2 operator<= (iv2 l, iv2 r);
	bv2 operator> (iv2 l, iv2 r);
	bv2 operator>= (iv2 l, iv2 r);
	bv2 operator== (iv2 l, iv2 r);
	bv2 operator!= (iv2 l, iv2 r);
	// vectors are equal, equivalent to all(l == r)
	bool equal (iv2 l, iv2 r);
	// componentwise ternary c ? l : r
	iv2 select (bv2 c, iv2 l, iv2 r);
	
	//// misc ops
	iv2 abs (iv2 v);
	iv2 min (iv2 l, iv2 r);
	iv2 max (iv2 l, iv2 r);
	iv2 clamp (iv2 x, iv2 a=iv2(0), iv2 b=iv2(1));
	// get min component of vector, optionally get component index via min_index
	s32 min_component (iv2 v, int* min_index=nullptr);
	// get max component of vector, optionally get component index via max_index
	s32 max_component (iv2 v, int* max_index=nullptr);
	
	iv2 wrap (iv2 v, iv2 range);
	iv2 wrap (iv2 v, iv2 a, iv2 b);
	
	fv2 to_rad (iv2 deg);
	// degress "literal", converts degrees to radiants
	fv2 deg (iv2 deg);
	fv2 to_deg (iv2 rad);
	
	//// linear algebra ops
	// magnitude of vector
	f32 length (iv2 v);
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	s32 length_sqr (iv2 v);
	// distance between points, equivalent to length(a - b)
	f32 distance (iv2 a, iv2 b);
	// normalize vector so that it has length() = 1, undefined for zero vector
	fv2 normalize (iv2 v);
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	fv2 normalize_or_zero (iv2 v);
	// dot product
	s32 dot (iv2 l, iv2 r);
	// 
	// 2d cross product hack for convinient 2d stuff
	// same as cross(v3(l, 0), v3(r, 0)).z,
	// ie. the cross product of the 2d vectors on the z=0 plane in 3d space and then return the z coord of that (signed mag of cross product)
	// 
	s32 cross (iv2 l, iv2 r);
	// rotate 2d vector counterclockwise 90 deg, ie. iv2(-y, x) which is fast
	iv2 rotate90 (iv2 v);
}// namespace vector

