// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"

//// forward declarations
union iv3;
union iv4;
union bv2;
union fv2;
union dv2;

union iv2 {
	struct {
		int	x, y;
	};
	int		arr[2];
	
	int& operator[] (int i);
	int operator[] (int i) const;
	
	iv2 ();
	// sets all components to one value
	constexpr iv2 (int all);
	// supply all components
	constexpr iv2 (int x, int y);
	// truncate vector
	constexpr iv2 (iv3 v);
	// truncate vector
	constexpr iv2 (iv4 v);
	
	iv2 operator+= (iv2 r);
	iv2 operator-= (iv2 r);
	iv2 operator*= (iv2 r);
	iv2 operator/= (iv2 r);
	
	//// Conversion operators
	operator fv2 () const;
	operator dv2 () const;
};

//// arthmethic ops
constexpr iv2 operator+ (iv2 v);
constexpr iv2 operator- (iv2 v);
constexpr iv2 operator+ (iv2 l, iv2 r);
constexpr iv2 operator- (iv2 l, iv2 r);
constexpr iv2 operator* (iv2 l, iv2 r);
constexpr iv2 operator/ (iv2 l, iv2 r);

//// comparison ops
constexpr bv2 operator< (iv2 l, iv2 r);
constexpr bv2 operator<= (iv2 l, iv2 r);
constexpr bv2 operator> (iv2 l, iv2 r);
constexpr bv2 operator>= (iv2 l, iv2 r);
constexpr bv2 operator== (iv2 l, iv2 r);
constexpr bv2 operator!= (iv2 l, iv2 r);
// vectors are equal, equivalent to all(l == r)
constexpr bool equal (iv2 l, iv2 r);
// componentwise ternary c ? l : r
constexpr iv2 select (iv2 c, iv2 l, iv2 r);

//// misc ops
iv2 abs (iv2 v);
iv2 min (iv2 l, iv2 r);
iv2 max (iv2 l, iv2 r);
iv2 clamp (iv2 x, iv2 a=iv2(0), iv2 b=iv2(1));
// get min component of vector, optionally get component index via min_index
int min_component (iv2 v, int* min_index=nullptr);
// get max component of vector, optionally get component index via max_index
int max_component (iv2 v, int* max_index=nullptr);

iv2 wrap (iv2 v, iv2 range);
iv2 wrap (iv2 v, iv2 a, iv2 b);

//// linear algebra ops
// magnitude of vector
f32 length (iv2 v);
// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
int length_sqr (iv2 v);
// distance between points, equivalent to length(a - b)
f32 distance (iv2 a, iv2 b);
// normalize vector so that it has length() = 1, undefined for zero vector
fv2 normalize (iv2 v);
// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
fv2 normalize_or_zero (iv2 v);


