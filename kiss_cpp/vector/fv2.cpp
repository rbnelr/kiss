// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "fv2.hpp"

#include "fv3.hpp"
#include "fv4.hpp"
#include "bv2.hpp"
#include "bv2.hpp"
#include "dv2.hpp"
#include "iv2.hpp"
#include "s64v2.hpp"
#include "u8v2.hpp"

namespace vector {
	
	f32& fv2::operator[] (int i) {
		return arr[i];
	}
	
	f32 const& fv2::operator[] (int i) const {
		return arr[i];
	}
	
	
	fv2::fv2 () {
		
	}
	
	// sets all components to one value
	// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
	fv2::fv2 (f32 all): x{all}, y{all} {
		
	}
	
	// supply all components
	fv2::fv2 (f32 x, f32 y): x{x}, y{y} {
		
	}
	
	// truncate vector
	fv2::fv2 (fv3 v): x{v.x}, y{v.y} {
		
	}
	
	// truncate vector
	fv2::fv2 (fv4 v): x{v.x}, y{v.y} {
		
	}
	
	//// Truncating cast operators
	
	
	//// Type cast operators
	
	
	fv2::operator bv2 () const {
		return bv2((bool)x, (bool)y);
	}
	
	fv2::operator dv2 () const {
		return dv2((f64)x, (f64)y);
	}
	
	fv2::operator iv2 () const {
		return iv2((s32)x, (s32)y);
	}
	
	fv2::operator s64v2 () const {
		return s64v2((s64)x, (s64)y);
	}
	
	fv2::operator u8v2 () const {
		return u8v2((u8)x, (u8)y);
	}
	
	
	fv2 fv2::operator+= (fv2 r) {
		x += r.x;
		y += r.y;
		return *this;
	}
	
	fv2 fv2::operator-= (fv2 r) {
		x -= r.x;
		y -= r.y;
		return *this;
	}
	
	fv2 fv2::operator*= (fv2 r) {
		x *= r.x;
		y *= r.y;
		return *this;
	}
	
	fv2 fv2::operator/= (fv2 r) {
		x /= r.x;
		y /= r.y;
		return *this;
	}
	
	//// arthmethic ops
	
	fv2 operator+ (fv2 v) {
		return fv2(+v.x, +v.y);
	}
	
	fv2 operator- (fv2 v) {
		return fv2(-v.x, -v.y);
	}
	
	fv2 operator+ (fv2 l, fv2 r) {
		return fv2(l.x + r.x, l.y + r.y);
	}
	
	fv2 operator- (fv2 l, fv2 r) {
		return fv2(l.x - r.x, l.y - r.y);
	}
	
	fv2 operator* (fv2 l, fv2 r) {
		return fv2(l.x * r.x, l.y * r.y);
	}
	
	fv2 operator/ (fv2 l, fv2 r) {
		return fv2(l.x / r.x, l.y / r.y);
	}
	
	//// comparison ops
	
	bv2 operator< (fv2 l, fv2 r) {
		return bv2(l.x < r.x, l.y < r.y);
	}
	
	bv2 operator<= (fv2 l, fv2 r) {
		return bv2(l.x <= r.x, l.y <= r.y);
	}
	
	bv2 operator> (fv2 l, fv2 r) {
		return bv2(l.x > r.x, l.y > r.y);
	}
	
	bv2 operator>= (fv2 l, fv2 r) {
		return bv2(l.x >= r.x, l.y >= r.y);
	}
	
	bv2 operator== (fv2 l, fv2 r) {
		return bv2(l.x == r.x, l.y == r.y);
	}
	
	bv2 operator!= (fv2 l, fv2 r) {
		return bv2(l.x != r.x, l.y != r.y);
	}
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (fv2 l, fv2 r) {
		return all(l == r);
	}
	
	// componentwise ternary c ? l : r
	fv2 select (bv2 c, fv2 l, fv2 r) {
		return c.x ? l.x : r.x, c.y ? l.y : r.y;
	}
	
	//// misc ops
	
	fv2 abs (fv2 v) {
		return fv2(abs(v.x), abs(v.y));
	}
	
	fv2 min (fv2 l, fv2 r) {
		return fv2(min(l.x,r.x), min(l.y,r.y));
	}
	
	fv2 max (fv2 l, fv2 r) {
		return fv2(max(l.x,r.x), max(l.y,r.y));
	}
	
	fv2 clamp (fv2 x, fv2 a, fv2 b) {
		return min(max(x,a), b);
	}
	
	// get min component of vector, optionally get component index via min_index
	f32 min_component (fv2 v, int* min_index) {
		int index = 0;
		f32 min_val = v.x;	
		for (int i=1; i<2; ++i) {
			if (v.arr[i] <= min_val) {
				index = i;
				min_val = v.arr[i];
			}
		}
		if (min_index) *min_index = index;
		return min_val;
	}
	
	// get max component of vector, optionally get component index via max_index
	f32 max_component (fv2 v, int* max_index) {
		int index = 0;
		f32 max_val = v.x;	
		for (int i=1; i<2; ++i) {
			if (v.arr[i] >= max_val) {
				index = i;
				max_val = v.arr[i];
			}
		}
		if (max_index) *max_index = index;
		return max_val;
	}
	
	
	fv2 floor (fv2 v) {
		return fv2(floor(v.x), floor(v.y));
	}
	
	fv2 ceil (fv2 v) {
		return fv2(ceil(v.x), ceil(v.y));
	}
	
	fv2 round (fv2 v) {
		return fv2(round(v.x), round(v.y));
	}
	
	iv2 floori (fv2 v) {
		return iv2(floori(v.x), floori(v.y));
	}
	
	iv2 ceili (fv2 v) {
		return iv2(ceili(v.x), ceili(v.y));
	}
	
	iv2 roundi (fv2 v) {
		return iv2(roundi(v.x), roundi(v.y));
	}
	
	fv2 pow (fv2 v, fv2 e) {
		return fv2(pow(v.x,e.x), pow(v.y,e.y));
	}
	
	fv2 wrap (fv2 v, fv2 range) {
		return fv2(wrap(v.x,range.x), wrap(v.y,range.y));
	}
	
	fv2 wrap (fv2 v, fv2 a, fv2 b) {
		return fv2(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y));
	}
	
	
	// linear interpolation t=0 -> a ; t=1 -> b ; t=0.5 -> (a+b)/2
	fv2 lerp (fv2 a, fv2 b, fv2 t) {
		return a * (fv2(1) - t) + b * t;
	}
	
	// linear mapping (reverse linear interpolation), map(70, 0,100) -> 0.7 ; map(0.5, -1,+1) -> 0.75
	fv2 map (fv2 x, fv2 in_a, fv2 in_b) {
		return (x - in_a) / (in_b - in_a);
	}
	
	// linear mapping, lerp(out_a, out_b, map(x, in_a, in_b))
	fv2 map (fv2 x, fv2 in_a, fv2 in_b, fv2 out_a, fv2 out_b) {
		return lerp(out_a, out_b, map(x, in_a, in_b));
	}
	
	//// angle stuff
	
	fv2 to_rad (fv2 deg) {
		return (fv2)deg * DEG_TO_RAD;
	}
	
	// degress "literal", converts degrees to radiants
	fv2 deg (fv2 deg) {
		return (fv2)deg * DEG_TO_RAD;
	}
	
	fv2 to_deg (fv2 rad) {
		return (fv2)rad * RAD_TO_DEG;
	}
	
	//// linear algebra ops
	
	// magnitude of vector
	f32 length (fv2 v) {
		return sqrt((f32)(v.x * v.x + v.y * v.y));
	}
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	f32 length_sqr (fv2 v) {
		return v.x * v.x + v.y * v.y;
	}
	
	// distance between points, equivalent to length(a - b)
	f32 distance (fv2 a, fv2 b) {
		return length(a - b);
	}
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	fv2 normalize (fv2 v) {
		return fv2(v) / length(v);
	}
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	fv2 normalize_or_zero (fv2 v) {
		f32 len = length(v);
		if (len == f32(0)) {
			return f32(0);
		}
		return fv2(v) / fv2(len);
	}
	
	// dot product
	f32 dot (fv2 l, fv2 r) {
		return l.x * r.x + l.y * r.y;
	}
	
	// 
	// 2d cross product hack for convinient 2d stuff
	// same as cross(v3(l, 0), v3(r, 0)).z,
	// ie. the cross product of the 2d vectors on the z=0 plane in 3d space and then return the z coord of that (signed mag of cross product)
	// 
	f32 cross (fv2 l, fv2 r) {
		return l.x * r.y - l.y * r.x;
	}
	
	// rotate 2d vector counterclockwise 90 deg, ie. fv2(-y, x) which is fast
	fv2 rotate90 (fv2 v) {
		return fv2(-v.y, v.x);
	}
}// namespace vector

