// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "dm2x3.hpp"

#include "dm2.hpp"
#include "dm3.hpp"
#include "dm4.hpp"
#include "dm3x4.hpp"
#include "fm2x3.hpp"

namespace vector {
	
	//// Accessors
	
	
	f64 dm2x3::get (int r, int c) const {
		return arr[c][r];
	}
	
	dv2 dm2x3::get_column (int indx) const {
		return arr[indx];
	}
	
	dv3 dm2x3::get_row (int indx) const {
		return dv3(arr[0][indx], arr[1][indx], arr[2][indx]);
	}
	
	//// Constructors
	
	
	dm2x3::dm2x3 () {
		
	}
	
	dm2x3::dm2x3 (f64 all): 
	arr{
		dv2(all, all),
		dv2(all, all),
		dv2(all, all)} {
		
	}
	
	dm2x3::dm2x3 (
			f64 c00, f64 c01, f64 c02,
			f64 c10, f64 c11, f64 c12): 
	arr{
		dv2(c00, c10),
		dv2(c01, c11),
		dv2(c02, c12)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	dm2x3 dm2x3::rows (dv3 row0, dv3 row1) {
		return dm2x3(
				row0[0], row0[1], row0[2],
				row1[0], row1[1], row1[2]);
	}
	
	dm2x3 dm2x3::rows (
			f64 c00, f64 c01, f64 c02,
			f64 c10, f64 c11, f64 c12) {
		return dm2x3(
				c00, c01, c02,
				c10, c11, c12);
	}
	
	dm2x3 dm2x3::columns (dv2 col0, dv2 col1, dv2 col2) {
		return dm2x3(
				col0[0], col1[0], col2[0],
				col0[1], col1[1], col2[1]);
	}
	
	dm2x3 dm2x3::columns (
			f64 c00, f64 c10,
			f64 c01, f64 c11,
			f64 c02, f64 c12) {
		return dm2x3(
				c00, c01, c02,
				c10, c11, c12);
	}
	
	
	dm2x3 dm2x3::identity () {
		return dm2x3(
				1,0,0,
				0,1,0);
	}
	
	// Casting operators
	
	
	dm2x3::operator dm2 () {
		return dm2(
				arr[0][0], arr[1][0],
				arr[0][1], arr[1][1]);
	}
	
	dm2x3::operator dm3 () {
		return dm3(
				arr[0][0], arr[1][0], arr[2][0],
				arr[0][1], arr[1][1], arr[2][1],
				        0,         0,         1);
	}
	
	dm2x3::operator dm4 () {
		return dm4(
				arr[0][0], arr[1][0], arr[2][0],         0,
				arr[0][1], arr[1][1], arr[2][1],         0,
				        0,         0,         1,         0,
				        0,         0,         0,         1);
	}
	
	dm2x3::operator dm3x4 () {
		return dm3x4(
				arr[0][0], arr[1][0], arr[2][0],         0,
				arr[0][1], arr[1][1], arr[2][1],         0,
				        0,         0,         1,         0);
	}
	
	dm2x3::operator fm2x3 () {
		return fm2x3(
				(f32)arr[0][0], (f32)arr[0][1], (f32)arr[0][2],
				(f32)arr[1][0], (f32)arr[1][1], (f32)arr[1][2]);
	}
	
	// Elementwise operators
	
	
	dm2x3 dm2x3::operator+ (dm2x3 m) {
		return dm2x3(
				+m.arr[0][0], +m.arr[1][0], +m.arr[2][0],
				+m.arr[0][1], +m.arr[1][1], +m.arr[2][1]);
	}
	
	dm2x3 dm2x3::operator- (dm2x3 m) {
		return dm2x3(
				-m.arr[0][0], -m.arr[1][0], -m.arr[2][0],
				-m.arr[0][1], -m.arr[1][1], -m.arr[2][1]);
	}
	
	dm2x3 operator+ (dm2x3 l, dm2x3 r) {
		return dm2x3(
				l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0],
				l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1]);
	}
	
	dm2x3 operator- (dm2x3 l, dm2x3 r) {
		return dm2x3(
				l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0],
				l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1]);
	}
	
	dm2x3 operator* (dm2x3 l, dm2x3 r) {
		return dm2x3(
				l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0],
				l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1]);
	}
	
	dm2x3 operator/ (dm2x3 l, dm2x3 r) {
		return dm2x3(
				l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0],
				l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1]);
	}
} // namespace vector

