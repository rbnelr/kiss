// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "dv2.hpp"

#include "dv3.hpp"
#include "dv4.hpp"
#include "bv2.hpp"
#include "iv2.hpp"
#include "s64v2.hpp"
#include "u8v2.hpp"

f64& dv2::operator[] (int i) {
	return arr[i];
}

f64 dv2::operator[] (int i) const {
	return arr[i];
}


dv2::dv2 () {
	
}

constexpr dv2::dv2 (f64 all): x{all}, y{all} {
	
}

constexpr dv2::dv2 (f64 x, f64 y): x{x}, y{y} {
	
}

constexpr dv2::dv2 (dv3 v): x{v.x}, y{v.y} {
	
}

constexpr dv2::dv2 (dv4 v): x{v.x}, y{v.y} {
	
}


dv2 dv2::operator+= (dv2 r) {
	x += r.x;
	y += r.y;
	return *this;
}

dv2 dv2::operator-= (dv2 r) {
	x -= r.x;
	y -= r.y;
	return *this;
}

dv2 dv2::operator*= (dv2 r) {
	x *= r.x;
	y *= r.y;
	return *this;
}

dv2 dv2::operator/= (dv2 r) {
	x /= r.x;
	y /= r.y;
	return *this;
}

//// Conversion operators

dv2::operator iv2 () const {
	return iv2((int)x, (int)y);
}

dv2::operator s64v2 () const {
	return s64v2((s64)x, (s64)y);
}

dv2::operator u8v2 () const {
	return u8v2((u8)x, (u8)y);
}

//// arthmethic ops

constexpr dv2 operator+ (dv2 v) {
	return dv2(+v.x, +v.y);
}

constexpr dv2 operator- (dv2 v) {
	return dv2(-v.x, -v.y);
}

constexpr dv2 operator+ (dv2 l, dv2 r) {
	return dv2(l.x + r.x, l.y + r.y);
}

constexpr dv2 operator- (dv2 l, dv2 r) {
	return dv2(l.x - r.x, l.y - r.y);
}

constexpr dv2 operator* (dv2 l, dv2 r) {
	return dv2(l.x * r.x, l.y * r.y);
}

constexpr dv2 operator/ (dv2 l, dv2 r) {
	return dv2(l.x / r.x, l.y / r.y);
}

//// comparison ops

constexpr bv2 operator< (dv2 l, dv2 r) {
	return bv2(l.x < r.x, l.y < r.y);
}

constexpr bv2 operator<= (dv2 l, dv2 r) {
	return bv2(l.x <= r.x, l.y <= r.y);
}

constexpr bv2 operator> (dv2 l, dv2 r) {
	return bv2(l.x > r.x, l.y > r.y);
}

constexpr bv2 operator>= (dv2 l, dv2 r) {
	return bv2(l.x >= r.x, l.y >= r.y);
}

constexpr bv2 operator== (dv2 l, dv2 r) {
	return bv2(l.x == r.x, l.y == r.y);
}

constexpr bv2 operator!= (dv2 l, dv2 r) {
	return bv2(l.x != r.x, l.y != r.y);
}

constexpr bool equal (dv2 l, dv2 r) {
	return all(l == r);
}

constexpr dv2 select (dv2 c, dv2 l, dv2 r) {
	return c.x ? l.x : r.x, c.y ? l.y : r.y;
}

//// misc ops

dv2 abs (dv2 v) {
	return dv2(abs(v.x), abs(v.y));
}

dv2 min (dv2 l, dv2 r) {
	return dv2(min(l.x,r.x), min(l.y,r.y));
}

dv2 max (dv2 l, dv2 r) {
	return dv2(max(l.x,r.x), max(l.y,r.y));
}

dv2 clamp (dv2 x, dv2 a, dv2 b) {
	return min(max(x,a), b);
}

f64 min_component (dv2 v, int* min_index) {
	int index = 0;
	f64 min_val = v.x;	
	for (int i=1; i<2; ++i) {
		if (v.arr[i] <= min_val) {
			index = i;
			min_val = v.arr[i];
		}
	}
	if (min_index) *min_index = index;
	return min_val;
}

f64 max_component (dv2 v, int* max_index) {
	int index = 0;
	f64 max_val = v.x;	
	for (int i=1; i<2; ++i) {
		if (v.arr[i] >= max_val) {
			index = i;
			max_val = v.arr[i];
		}
	}
	if (max_index) *max_index = index;
	return max_val;
}


dv2 floor (dv2 v) {
	return dv2(floor(v.x), floor(v.y));
}

dv2 ceil (dv2 v) {
	return dv2(ceil(v.x), ceil(v.y));
}

dv2 round (dv2 v) {
	return dv2(round(v.x), round(v.y));
}

s64v2 floori (dv2 v) {
	return s64v2(floori(v.x), floori(v.y));
}

s64v2 ceili (dv2 v) {
	return s64v2(ceili(v.x), ceili(v.y));
}

s64v2 roundi (dv2 v) {
	return s64v2(roundi(v.x), roundi(v.y));
}

dv2 pow (dv2 v, dv2 e) {
	return dv2(pow(v.x,e.x), pow(v.y,e.y));
}

dv2 wrap (dv2 v, dv2 range) {
	return dv2(wrap(v.x,range.x), wrap(v.y,range.y));
}

dv2 wrap (dv2 v, dv2 a, dv2 b) {
	return dv2(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y));
}

//// linear algebra ops

f64 length (dv2 v) {
	return sqrt((f64)(v.x * v.x + v.y * v.y));
}

f64 length_sqr (dv2 v) {
	return v.x * v.x + v.y * v.y;
}

f64 distance (dv2 a, dv2 b) {
	return length(a - b);
}

dv2 normalize (dv2 v) {
	return dv2(v) / length(v);
}

dv2 normalize_or_zero (dv2 v) {
	f64 len = length(v);
	if (len == f64(0)) {
		return f64(0);
	}
	return dv2(v) / dv2(len);
}


dv2 lerp (dv2 a, dv2 b, dv2 t) {
	return a * (dv2(1) - t) + b * t;
}

dv2 map (dv2 x, dv2 in_a, dv2 in_b) {
	return (x - in_a) / (in_b - in_a);
}

dv2 map (dv2 x, dv2 in_a, dv2 in_b, dv2 out_a, dv2 out_b) {
	return lerp(out_a, out_b, map(x, in_a, in_b));
}

dv2 smoothstep (dv2 x) {
	dv2 t = clamp(x);
	return t * t * (dv2(3) - dv2(2) * t);
}

dv2 bezier (dv2 a, dv2 b, dv2 c, f64 t) {
	dv2 d = lerp(a, b, t);
	dv2 e = lerp(b, c, t);
	dv2 f = lerp(d, e, t);
	return f;
}

dv2 bezier (dv2 a, dv2 b, dv2 c, dv2 d, f64 t) {
	return bezier(
		lerp(a, b, t),
		lerp(b, c, t),
		lerp(c, d, t),
		t
	);
}

dv2 bezier (dv2 a, dv2 b, dv2 c, dv2 d, dv2 e, f64 t) {
	return bezier(
		lerp(a, b, t),
		lerp(b, c, t),
		lerp(c, d, t),
		lerp(d, e, t),
		t
	);
}

//// angle stuff

constexpr dv2 to_rad (dv2 deg) {
	return deg * DEG_TO_RADd;
}

constexpr dv2 deg (dv2 deg) {
	return deg * DEG_TO_RADd;
}

constexpr dv2 to_deg (dv2 rad) {
	return rad * RAD_TO_DEGd;
}

