// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "dm4.hpp"

#include "dm2.hpp"
#include "dm3.hpp"
#include "dm2x3.hpp"
#include "dm3x4.hpp"
#include "fm4.hpp"

namespace vector {
	
	//// Accessors
	
	
	f64 dm4::get (int r, int c) const {
		return arr[c][r];
	}
	
	dv4 dm4::get_column (int indx) const {
		return arr[indx];
	}
	
	dv4 dm4::get_row (int indx) const {
		return dv4(arr[0][indx], arr[1][indx], arr[2][indx], arr[3][indx]);
	}
	
	//// Constructors
	
	
	dm4::dm4 () {
		
	}
	
	dm4::dm4 (f64 all): 
	arr{
		dv4(all, all, all, all),
		dv4(all, all, all, all),
		dv4(all, all, all, all),
		dv4(all, all, all, all)} {
		
	}
	
	dm4::dm4 (
			f64 c00, f64 c01, f64 c02, f64 c03,
			f64 c10, f64 c11, f64 c12, f64 c13,
			f64 c20, f64 c21, f64 c22, f64 c23,
			f64 c30, f64 c31, f64 c32, f64 c33): 
	arr{
		dv4(c00, c10, c20, c30),
		dv4(c01, c11, c21, c31),
		dv4(c02, c12, c22, c32),
		dv4(c03, c13, c23, c33)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	dm4 dm4::rows (dv4 row0, dv4 row1, dv4 row2, dv4 row3) {
		return dm4(
				row0[0], row0[1], row0[2], row0[3],
				row1[0], row1[1], row1[2], row1[3],
				row2[0], row2[1], row2[2], row2[3],
				row3[0], row3[1], row3[2], row3[3]);
	}
	
	dm4 dm4::rows (
			f64 c00, f64 c01, f64 c02, f64 c03,
			f64 c10, f64 c11, f64 c12, f64 c13,
			f64 c20, f64 c21, f64 c22, f64 c23,
			f64 c30, f64 c31, f64 c32, f64 c33) {
		return dm4(
				c00, c01, c02, c03,
				c10, c11, c12, c13,
				c20, c21, c22, c23,
				c30, c31, c32, c33);
	}
	
	dm4 dm4::columns (dv4 col0, dv4 col1, dv4 col2, dv4 col3) {
		return dm4(
				col0[0], col1[0], col2[0], col3[0],
				col0[1], col1[1], col2[1], col3[1],
				col0[2], col1[2], col2[2], col3[2],
				col0[3], col1[3], col2[3], col3[3]);
	}
	
	dm4 dm4::columns (
			f64 c00, f64 c10, f64 c20, f64 c30,
			f64 c01, f64 c11, f64 c21, f64 c31,
			f64 c02, f64 c12, f64 c22, f64 c32,
			f64 c03, f64 c13, f64 c23, f64 c33) {
		return dm4(
				c00, c01, c02, c03,
				c10, c11, c12, c13,
				c20, c21, c22, c23,
				c30, c31, c32, c33);
	}
	
	
	dm4 dm4::identity () {
		return dm4(
				1,0,0,0,
				0,1,0,0,
				0,0,1,0,
				0,0,0,1);
	}
	
	// Casting operators
	
	
	dm4::operator dm2 () {
		return dm2(
				arr[0][0], arr[1][0],
				arr[0][1], arr[1][1]);
	}
	
	dm4::operator dm3 () {
		return dm3(
				arr[0][0], arr[1][0], arr[2][0],
				arr[0][1], arr[1][1], arr[2][1],
				arr[0][2], arr[1][2], arr[2][2]);
	}
	
	dm4::operator dm2x3 () {
		return dm2x3(
				arr[0][0], arr[1][0], arr[2][0],
				arr[0][1], arr[1][1], arr[2][1]);
	}
	
	dm4::operator dm3x4 () {
		return dm3x4(
				arr[0][0], arr[1][0], arr[2][0], arr[3][0],
				arr[0][1], arr[1][1], arr[2][1], arr[3][1],
				arr[0][2], arr[1][2], arr[2][2], arr[3][2]);
	}
	
	dm4::operator fm4 () {
		return fm4(
				(f32)arr[0][0], (f32)arr[0][1], (f32)arr[0][2], (f32)arr[0][3],
				(f32)arr[1][0], (f32)arr[1][1], (f32)arr[1][2], (f32)arr[1][3],
				(f32)arr[2][0], (f32)arr[2][1], (f32)arr[2][2], (f32)arr[2][3],
				(f32)arr[3][0], (f32)arr[3][1], (f32)arr[3][2], (f32)arr[3][3]);
	}
	
	// Elementwise operators
	
	
	dm4 dm4::operator+ (dm4 m) {
		return dm4(
				+m.arr[0][0], +m.arr[1][0], +m.arr[2][0], +m.arr[3][0],
				+m.arr[0][1], +m.arr[1][1], +m.arr[2][1], +m.arr[3][1],
				+m.arr[0][2], +m.arr[1][2], +m.arr[2][2], +m.arr[3][2],
				+m.arr[0][3], +m.arr[1][3], +m.arr[2][3], +m.arr[3][3]);
	}
	
	dm4 dm4::operator- (dm4 m) {
		return dm4(
				-m.arr[0][0], -m.arr[1][0], -m.arr[2][0], -m.arr[3][0],
				-m.arr[0][1], -m.arr[1][1], -m.arr[2][1], -m.arr[3][1],
				-m.arr[0][2], -m.arr[1][2], -m.arr[2][2], -m.arr[3][2],
				-m.arr[0][3], -m.arr[1][3], -m.arr[2][3], -m.arr[3][3]);
	}
	
	dm4 operator+ (dm4 l, dm4 r) {
		return dm4(
				l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0], l.arr[3][0] + r.arr[3][0],
				l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1], l.arr[3][1] + r.arr[3][1],
				l.arr[0][2] + r.arr[0][2], l.arr[1][2] + r.arr[1][2], l.arr[2][2] + r.arr[2][2], l.arr[3][2] + r.arr[3][2],
				l.arr[0][3] + r.arr[0][3], l.arr[1][3] + r.arr[1][3], l.arr[2][3] + r.arr[2][3], l.arr[3][3] + r.arr[3][3]);
	}
	
	dm4 operator- (dm4 l, dm4 r) {
		return dm4(
				l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0], l.arr[3][0] - r.arr[3][0],
				l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1], l.arr[3][1] - r.arr[3][1],
				l.arr[0][2] - r.arr[0][2], l.arr[1][2] - r.arr[1][2], l.arr[2][2] - r.arr[2][2], l.arr[3][2] - r.arr[3][2],
				l.arr[0][3] - r.arr[0][3], l.arr[1][3] - r.arr[1][3], l.arr[2][3] - r.arr[2][3], l.arr[3][3] - r.arr[3][3]);
	}
	
	dm4 operator* (dm4 l, dm4 r) {
		return dm4(
				l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0], l.arr[3][0] * r.arr[3][0],
				l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1], l.arr[3][1] * r.arr[3][1],
				l.arr[0][2] * r.arr[0][2], l.arr[1][2] * r.arr[1][2], l.arr[2][2] * r.arr[2][2], l.arr[3][2] * r.arr[3][2],
				l.arr[0][3] * r.arr[0][3], l.arr[1][3] * r.arr[1][3], l.arr[2][3] * r.arr[2][3], l.arr[3][3] * r.arr[3][3]);
	}
	
	dm4 operator/ (dm4 l, dm4 r) {
		return dm4(
				l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0], l.arr[3][0] / r.arr[3][0],
				l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1], l.arr[3][1] / r.arr[3][1],
				l.arr[0][2] / r.arr[0][2], l.arr[1][2] / r.arr[1][2], l.arr[2][2] / r.arr[2][2], l.arr[3][2] / r.arr[3][2],
				l.arr[0][3] / r.arr[0][3], l.arr[1][3] / r.arr[1][3], l.arr[2][3] / r.arr[2][3], l.arr[3][3] / r.arr[3][3]);
	}
} // namespace vector

