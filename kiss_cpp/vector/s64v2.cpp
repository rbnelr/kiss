// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#include "s64v2.hpp"

#include "s64v3.hpp"
#include "s64v4.hpp"
#include "bv2.hpp"
#include "fv2.hpp"
#include "dv2.hpp"

s64& s64v2::operator[] (int i) {
	return arr[i];
}

s64 s64v2::operator[] (int i) const {
	return arr[i];
}


s64v2::s64v2 () {
	
}

constexpr s64v2::s64v2 (s64 all): x{all}, y{all} {
	
}

constexpr s64v2::s64v2 (s64 x, s64 y): x{x}, y{y} {
	
}

constexpr s64v2::s64v2 (s64v3 v): x{v.x}, y{v.y} {
	
}

constexpr s64v2::s64v2 (s64v4 v): x{v.x}, y{v.y} {
	
}


s64v2 s64v2::operator+= (s64v2 r) {
	x += r.x;
	y += r.y;
	return *this;
}

s64v2 s64v2::operator-= (s64v2 r) {
	x -= r.x;
	y -= r.y;
	return *this;
}

s64v2 s64v2::operator*= (s64v2 r) {
	x *= r.x;
	y *= r.y;
	return *this;
}

s64v2 s64v2::operator/= (s64v2 r) {
	x /= r.x;
	y /= r.y;
	return *this;
}

//// Conversion operators

s64v2::operator fv2 () const {
	return fv2((f32)x, (f32)y);
}

s64v2::operator dv2 () const {
	return dv2((f64)x, (f64)y);
}

//// arthmethic ops

constexpr s64v2 operator+ (s64v2 v) {
	return s64v2(+v.x, +v.y);
}

constexpr s64v2 operator- (s64v2 v) {
	return s64v2(-v.x, -v.y);
}

constexpr s64v2 operator+ (s64v2 l, s64v2 r) {
	return s64v2(l.x + r.x, l.y + r.y);
}

constexpr s64v2 operator- (s64v2 l, s64v2 r) {
	return s64v2(l.x - r.x, l.y - r.y);
}

constexpr s64v2 operator* (s64v2 l, s64v2 r) {
	return s64v2(l.x * r.x, l.y * r.y);
}

constexpr s64v2 operator/ (s64v2 l, s64v2 r) {
	return s64v2(l.x / r.x, l.y / r.y);
}

//// comparison ops

constexpr bv2 operator< (s64v2 l, s64v2 r) {
	return bv2(l.x < r.x, l.y < r.y);
}

constexpr bv2 operator<= (s64v2 l, s64v2 r) {
	return bv2(l.x <= r.x, l.y <= r.y);
}

constexpr bv2 operator> (s64v2 l, s64v2 r) {
	return bv2(l.x > r.x, l.y > r.y);
}

constexpr bv2 operator>= (s64v2 l, s64v2 r) {
	return bv2(l.x >= r.x, l.y >= r.y);
}

constexpr bv2 operator== (s64v2 l, s64v2 r) {
	return bv2(l.x == r.x, l.y == r.y);
}

constexpr bv2 operator!= (s64v2 l, s64v2 r) {
	return bv2(l.x != r.x, l.y != r.y);
}

constexpr bool equal (s64v2 l, s64v2 r) {
	return all(l == r);
}

constexpr s64v2 select (s64v2 c, s64v2 l, s64v2 r) {
	return c.x ? l.x : r.x, c.y ? l.y : r.y;
}

//// misc ops

s64v2 abs (s64v2 v) {
	return s64v2(abs(v.x), abs(v.y));
}

s64v2 min (s64v2 l, s64v2 r) {
	return s64v2(min(l.x,r.x), min(l.y,r.y));
}

s64v2 max (s64v2 l, s64v2 r) {
	return s64v2(max(l.x,r.x), max(l.y,r.y));
}

s64v2 clamp (s64v2 x, s64v2 a, s64v2 b) {
	return min(max(x,a), b);
}

s64 min_component (s64v2 v, int* min_index) {
	int index = 0;
	s64 min_val = v.x;	
	for (int i=1; i<2; ++i) {
		if (v.arr[i] <= min_val) {
			index = i;
			min_val = v.arr[i];
		}
	}
	if (min_index) *min_index = index;
	return min_val;
}

s64 max_component (s64v2 v, int* max_index) {
	int index = 0;
	s64 max_val = v.x;	
	for (int i=1; i<2; ++i) {
		if (v.arr[i] >= max_val) {
			index = i;
			max_val = v.arr[i];
		}
	}
	if (max_index) *max_index = index;
	return max_val;
}


s64v2 wrap (s64v2 v, s64v2 range) {
	return s64v2(wrap(v.x,range.x), wrap(v.y,range.y));
}

s64v2 wrap (s64v2 v, s64v2 a, s64v2 b) {
	return s64v2(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y));
}

//// linear algebra ops

f64 length (s64v2 v) {
	return sqrt((f64)(v.x * v.x + v.y * v.y));
}

s64 length_sqr (s64v2 v) {
	return v.x * v.x + v.y * v.y;
}

f64 distance (s64v2 a, s64v2 b) {
	return length(a - b);
}

dv2 normalize (s64v2 v) {
	return dv2(v) / length(v);
}

dv2 normalize_or_zero (s64v2 v) {
	f64 len = length(v);
	if (len == f64(0)) {
		return f64(0);
	}
	return dv2(v) / dv2(len);
}


