// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"


namespace vector {
	//// forward declarations
	struct iv2;
	struct iv3;
	struct bv4;
	struct bv4;
	struct fv4;
	struct dv4;
	struct s64v4;
	struct u8v4;
	
	struct iv4 {
		union {
			struct {
				s32	x, y, z, w;
			};
			s32		arr[4];
		};
		
		inline FORCEINLINE s32& operator[] (int i) {
			return arr[i];
		}
		
		inline FORCEINLINE s32 const& operator[] (int i) const {
			return arr[i];
		}
		
		
		inline FORCEINLINE iv4 () {
			
		}
		
		// sets all components to one value
		// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
		inline FORCEINLINE iv4 (s32 all): x{all}, y{all}, z{all}, w{all} {
			
		}
		
		// supply all components
		inline FORCEINLINE iv4 (s32 x, s32 y, s32 z, s32 w): x{x}, y{y}, z{z}, w{w} {
			
		}
		// extend vector
		iv4 (iv2 xy, s32 z, s32 w);
		// extend vector
		iv4 (iv3 xyz, s32 w);
		
		//// Truncating cast operators
		
		explicit operator iv2 () const;
		explicit operator iv3 () const;
		
		//// Type cast operators
		
		explicit operator bv4 () const;
		explicit operator fv4 () const;
		explicit operator dv4 () const;
		explicit operator s64v4 () const;
		explicit operator u8v4 () const;
		
		
		inline FORCEINLINE iv4 operator+= (iv4 r) {
			x += r.x;
			y += r.y;
			z += r.z;
			w += r.w;
			return *this;
		}
		
		inline FORCEINLINE iv4 operator-= (iv4 r) {
			x -= r.x;
			y -= r.y;
			z -= r.z;
			w -= r.w;
			return *this;
		}
		
		inline FORCEINLINE iv4 operator*= (iv4 r) {
			x *= r.x;
			y *= r.y;
			z *= r.z;
			w *= r.w;
			return *this;
		}
		
		inline FORCEINLINE iv4 operator/= (iv4 r) {
			x /= r.x;
			y /= r.y;
			z /= r.z;
			w /= r.w;
			return *this;
		}
	};
	
	//// arthmethic ops
	
	inline FORCEINLINE iv4 operator+ (iv4 v) {
		return iv4(+v.x, +v.y, +v.z, +v.w);
	}
	
	inline FORCEINLINE iv4 operator- (iv4 v) {
		return iv4(-v.x, -v.y, -v.z, -v.w);
	}
	
	inline FORCEINLINE iv4 operator+ (iv4 l, iv4 r) {
		return iv4(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w);
	}
	
	inline FORCEINLINE iv4 operator- (iv4 l, iv4 r) {
		return iv4(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w);
	}
	
	inline FORCEINLINE iv4 operator* (iv4 l, iv4 r) {
		return iv4(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w);
	}
	
	inline FORCEINLINE iv4 operator/ (iv4 l, iv4 r) {
		return iv4(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w);
	}
	
	//// comparison ops
	bv4 operator< (iv4 l, iv4 r);
	bv4 operator<= (iv4 l, iv4 r);
	bv4 operator> (iv4 l, iv4 r);
	bv4 operator>= (iv4 l, iv4 r);
	bv4 operator== (iv4 l, iv4 r);
	bv4 operator!= (iv4 l, iv4 r);
	// vectors are equal, equivalent to all(l == r)
	bool equal (iv4 l, iv4 r);
	// componentwise ternary c ? l : r
	iv4 select (bv4 c, iv4 l, iv4 r);
	
	//// misc ops
	
	inline FORCEINLINE iv4 abs (iv4 v) {
		return iv4(abs(v.x), abs(v.y), abs(v.z), abs(v.w));
	}
	
	inline FORCEINLINE iv4 min (iv4 l, iv4 r) {
		return iv4(min(l.x,r.x), min(l.y,r.y), min(l.z,r.z), min(l.w,r.w));
	}
	
	inline FORCEINLINE iv4 max (iv4 l, iv4 r) {
		return iv4(max(l.x,r.x), max(l.y,r.y), max(l.z,r.z), max(l.w,r.w));
	}
	iv4 clamp (iv4 x, iv4 a=iv4(0), iv4 b=iv4(1));
	// get min component of vector, optionally get component index via min_index
	s32 min_component (iv4 v, int* min_index=nullptr);
	// get max component of vector, optionally get component index via max_index
	s32 max_component (iv4 v, int* max_index=nullptr);
	
	
	inline FORCEINLINE iv4 wrap (iv4 v, iv4 range) {
		return iv4(wrap(v.x,range.x), wrap(v.y,range.y), wrap(v.z,range.z), wrap(v.w,range.w));
	}
	
	inline FORCEINLINE iv4 wrap (iv4 v, iv4 a, iv4 b) {
		return iv4(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y), wrap(v.z,a.z,b.z), wrap(v.w,a.w,b.w));
	}
	
	fv4 to_rad (iv4 deg);
	// degress "literal", converts degrees to radiants
	fv4 deg (iv4 deg);
	fv4 to_deg (iv4 rad);
	
	//// linear algebra ops
	// magnitude of vector
	f32 length (iv4 v);
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	s32 length_sqr (iv4 v);
	// distance between points, equivalent to length(a - b)
	f32 distance (iv4 a, iv4 b);
	// normalize vector so that it has length() = 1, undefined for zero vector
	fv4 normalize (iv4 v);
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	fv4 normalize_or_zero (iv4 v);
	// dot product
	s32 dot (iv4 l, iv4 r);
}// namespace vector

