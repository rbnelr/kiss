// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"


namespace vector {
	//// forward declarations
	struct iv3;
	struct iv4;
	struct bv2;
	struct bv2;
	struct fv2;
	struct dv2;
	struct s64v2;
	struct u8v2;
	
	struct iv2 {
		union {
			struct {
				s32	x, y;
			};
			s32		arr[2];
		};
		
		inline FORCEINLINE s32& operator[] (int i) {
			return arr[i];
		}
		
		inline FORCEINLINE s32 const& operator[] (int i) const {
			return arr[i];
		}
		
		
		inline FORCEINLINE iv2 () {
			
		}
		
		// sets all components to one value
		// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
		inline FORCEINLINE iv2 (s32 all): x{all}, y{all} {
			
		}
		
		// supply all components
		inline FORCEINLINE iv2 (s32 x, s32 y): x{x}, y{y} {
			
		}
		// truncate vector
		iv2 (iv3 v);
		// truncate vector
		iv2 (iv4 v);
		
		//// Truncating cast operators
		
		
		//// Type cast operators
		
		explicit operator bv2 () const;
		explicit operator fv2 () const;
		explicit operator dv2 () const;
		explicit operator s64v2 () const;
		explicit operator u8v2 () const;
		
		
		inline FORCEINLINE iv2 operator+= (iv2 r) {
			x += r.x;
			y += r.y;
			return *this;
		}
		
		inline FORCEINLINE iv2 operator-= (iv2 r) {
			x -= r.x;
			y -= r.y;
			return *this;
		}
		
		inline FORCEINLINE iv2 operator*= (iv2 r) {
			x *= r.x;
			y *= r.y;
			return *this;
		}
		
		inline FORCEINLINE iv2 operator/= (iv2 r) {
			x /= r.x;
			y /= r.y;
			return *this;
		}
	};
	
	//// arthmethic ops
	
	inline FORCEINLINE iv2 operator+ (iv2 v) {
		return iv2(+v.x, +v.y);
	}
	
	inline FORCEINLINE iv2 operator- (iv2 v) {
		return iv2(-v.x, -v.y);
	}
	
	inline FORCEINLINE iv2 operator+ (iv2 l, iv2 r) {
		return iv2(l.x + r.x, l.y + r.y);
	}
	
	inline FORCEINLINE iv2 operator- (iv2 l, iv2 r) {
		return iv2(l.x - r.x, l.y - r.y);
	}
	
	inline FORCEINLINE iv2 operator* (iv2 l, iv2 r) {
		return iv2(l.x * r.x, l.y * r.y);
	}
	
	inline FORCEINLINE iv2 operator/ (iv2 l, iv2 r) {
		return iv2(l.x / r.x, l.y / r.y);
	}
	
	//// comparison ops
	bv2 operator< (iv2 l, iv2 r);
	bv2 operator<= (iv2 l, iv2 r);
	bv2 operator> (iv2 l, iv2 r);
	bv2 operator>= (iv2 l, iv2 r);
	bv2 operator== (iv2 l, iv2 r);
	bv2 operator!= (iv2 l, iv2 r);
	// vectors are equal, equivalent to all(l == r)
	bool equal (iv2 l, iv2 r);
	// componentwise ternary c ? l : r
	iv2 select (bv2 c, iv2 l, iv2 r);
	
	//// misc ops
	
	inline FORCEINLINE iv2 abs (iv2 v) {
		return iv2(abs(v.x), abs(v.y));
	}
	
	inline FORCEINLINE iv2 min (iv2 l, iv2 r) {
		return iv2(min(l.x,r.x), min(l.y,r.y));
	}
	
	inline FORCEINLINE iv2 max (iv2 l, iv2 r) {
		return iv2(max(l.x,r.x), max(l.y,r.y));
	}
	iv2 clamp (iv2 x, iv2 a=iv2(0), iv2 b=iv2(1));
	// get min component of vector, optionally get component index via min_index
	s32 min_component (iv2 v, int* min_index=nullptr);
	// get max component of vector, optionally get component index via max_index
	s32 max_component (iv2 v, int* max_index=nullptr);
	
	
	inline FORCEINLINE iv2 wrap (iv2 v, iv2 range) {
		return iv2(wrap(v.x,range.x), wrap(v.y,range.y));
	}
	
	inline FORCEINLINE iv2 wrap (iv2 v, iv2 a, iv2 b) {
		return iv2(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y));
	}
	
	fv2 to_rad (iv2 deg);
	// degress "literal", converts degrees to radiants
	fv2 deg (iv2 deg);
	fv2 to_deg (iv2 rad);
	
	//// linear algebra ops
	// magnitude of vector
	f32 length (iv2 v);
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	s32 length_sqr (iv2 v);
	// distance between points, equivalent to length(a - b)
	f32 distance (iv2 a, iv2 b);
	// normalize vector so that it has length() = 1, undefined for zero vector
	fv2 normalize (iv2 v);
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	fv2 normalize_or_zero (iv2 v);
	// dot product
	s32 dot (iv2 l, iv2 r);
	// 
	// 2d cross product hack for convinient 2d stuff
	// same as cross(v3(l, 0), v3(r, 0)).z,
	// ie. the cross product of the 2d vectors on the z=0 plane in 3d space and then return the z coord of that (signed mag of cross product)
	// 
	s32 cross (iv2 l, iv2 r);
	// rotate 2d vector counterclockwise 90 deg, ie. iv2(-y, x) which is fast
	iv2 rotate90 (iv2 v);
}// namespace vector

