// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"


namespace vector {
	//// forward declarations
	union dv2;
	union dv4;
	union bv3;
	union bv3;
	union fv3;
	union iv3;
	union s64v3;
	union u8v3;
	
	union dv3 {
		struct {
			f64	x, y, z;
		};
		f64		arr[3];
		
		
		inline FORCEINLINE f64& operator[] (int i) {
			return arr[i];
		}
		
		inline FORCEINLINE f64 const& operator[] (int i) const {
			return arr[i];
		}
		
		
		inline FORCEINLINE dv3 () {
			
		}
		
		// sets all components to one value
		// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
		inline FORCEINLINE dv3 (f64 all): x{all}, y{all}, z{all} {
			
		}
		
		// supply all components
		inline FORCEINLINE dv3 (f64 x, f64 y, f64 z): x{x}, y{y}, z{z} {
			
		}
		// extend vector
		dv3 (dv2 xy, f64 z);
		// truncate vector
		dv3 (dv4 v);
		
		//// Truncating cast operators
		
		explicit operator dv2 () const;
		
		//// Type cast operators
		
		explicit operator bv3 () const;
		explicit operator fv3 () const;
		explicit operator iv3 () const;
		explicit operator s64v3 () const;
		explicit operator u8v3 () const;
		
		
		inline FORCEINLINE dv3 operator+= (dv3 r) {
			x += r.x;
			y += r.y;
			z += r.z;
			return *this;
		}
		
		inline FORCEINLINE dv3 operator-= (dv3 r) {
			x -= r.x;
			y -= r.y;
			z -= r.z;
			return *this;
		}
		
		inline FORCEINLINE dv3 operator*= (dv3 r) {
			x *= r.x;
			y *= r.y;
			z *= r.z;
			return *this;
		}
		
		inline FORCEINLINE dv3 operator/= (dv3 r) {
			x /= r.x;
			y /= r.y;
			z /= r.z;
			return *this;
		}
	};
	
	//// arthmethic ops
	
	inline FORCEINLINE dv3 operator+ (dv3 v) {
		return dv3(+v.x, +v.y, +v.z);
	}
	
	inline FORCEINLINE dv3 operator- (dv3 v) {
		return dv3(-v.x, -v.y, -v.z);
	}
	
	inline FORCEINLINE dv3 operator+ (dv3 l, dv3 r) {
		return dv3(l.x + r.x, l.y + r.y, l.z + r.z);
	}
	
	inline FORCEINLINE dv3 operator- (dv3 l, dv3 r) {
		return dv3(l.x - r.x, l.y - r.y, l.z - r.z);
	}
	
	inline FORCEINLINE dv3 operator* (dv3 l, dv3 r) {
		return dv3(l.x * r.x, l.y * r.y, l.z * r.z);
	}
	
	inline FORCEINLINE dv3 operator/ (dv3 l, dv3 r) {
		return dv3(l.x / r.x, l.y / r.y, l.z / r.z);
	}
	
	//// comparison ops
	bv3 operator< (dv3 l, dv3 r);
	bv3 operator<= (dv3 l, dv3 r);
	bv3 operator> (dv3 l, dv3 r);
	bv3 operator>= (dv3 l, dv3 r);
	bv3 operator== (dv3 l, dv3 r);
	bv3 operator!= (dv3 l, dv3 r);
	// vectors are equal, equivalent to all(l == r)
	bool equal (dv3 l, dv3 r);
	// componentwise ternary c ? l : r
	dv3 select (bv3 c, dv3 l, dv3 r);
	
	//// misc ops
	
	inline FORCEINLINE dv3 abs (dv3 v) {
		return dv3(abs(v.x), abs(v.y), abs(v.z));
	}
	
	inline FORCEINLINE dv3 min (dv3 l, dv3 r) {
		return dv3(min(l.x,r.x), min(l.y,r.y), min(l.z,r.z));
	}
	
	inline FORCEINLINE dv3 max (dv3 l, dv3 r) {
		return dv3(max(l.x,r.x), max(l.y,r.y), max(l.z,r.z));
	}
	dv3 clamp (dv3 x, dv3 a=dv3(0), dv3 b=dv3(1));
	// get min component of vector, optionally get component index via min_index
	f64 min_component (dv3 v, int* min_index=nullptr);
	// get max component of vector, optionally get component index via max_index
	f64 max_component (dv3 v, int* max_index=nullptr);
	
	
	inline FORCEINLINE dv3 floor (dv3 v) {
		return dv3(floor(v.x), floor(v.y), floor(v.z));
	}
	
	inline FORCEINLINE dv3 ceil (dv3 v) {
		return dv3(ceil(v.x), ceil(v.y), ceil(v.z));
	}
	
	inline FORCEINLINE dv3 round (dv3 v) {
		return dv3(round(v.x), round(v.y), round(v.z));
	}
	s64v3 floori (dv3 v);
	s64v3 ceili (dv3 v);
	s64v3 roundi (dv3 v);
	
	inline FORCEINLINE dv3 pow (dv3 v, dv3 e) {
		return dv3(pow(v.x,e.x), pow(v.y,e.y), pow(v.z,e.z));
	}
	
	inline FORCEINLINE dv3 wrap (dv3 v, dv3 range) {
		return dv3(wrap(v.x,range.x), wrap(v.y,range.y), wrap(v.z,range.z));
	}
	
	inline FORCEINLINE dv3 wrap (dv3 v, dv3 a, dv3 b) {
		return dv3(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y), wrap(v.z,a.z,b.z));
	}
	
	// linear interpolation t=0 -> a ; t=1 -> b ; t=0.5 -> (a+b)/2
	dv3 lerp (dv3 a, dv3 b, dv3 t);
	// linear mapping (reverse linear interpolation), map(70, 0,100) -> 0.7 ; map(0.5, -1,+1) -> 0.75
	dv3 map (dv3 x, dv3 in_a, dv3 in_b);
	// linear mapping, lerp(out_a, out_b, map(x, in_a, in_b))
	dv3 map (dv3 x, dv3 in_a, dv3 in_b, dv3 out_a, dv3 out_b);
	
	//// angle stuff
	dv3 to_rad (dv3 deg);
	// degress "literal", converts degrees to radiants
	dv3 deg (dv3 deg);
	dv3 to_deg (dv3 rad);
	
	//// linear algebra ops
	// magnitude of vector
	f64 length (dv3 v);
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	f64 length_sqr (dv3 v);
	// distance between points, equivalent to length(a - b)
	f64 distance (dv3 a, dv3 b);
	// normalize vector so that it has length() = 1, undefined for zero vector
	dv3 normalize (dv3 v);
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	dv3 normalize_or_zero (dv3 v);
	// dot product
	f64 dot (dv3 l, dv3 r);
	// 3d cross product
	dv3 cross (dv3 l, dv3 r);
}// namespace vector

