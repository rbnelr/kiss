// generated by C:\Users\Me\Desktop\kiss\vector_srcgen\srcgen.py
#pragma once

#include "kissmath.hpp"


namespace vector {
	//// forward declarations
	struct iv2;
	struct iv4;
	struct bv3;
	struct bv3;
	struct fv3;
	struct dv3;
	struct s64v3;
	struct u8v3;
	
	struct iv3 {
		union {
			struct {
				s32	x, y, z;
			};
			s32		arr[3];
		};
		
		inline FORCEINLINE s32& operator[] (int i) {
			return arr[i];
		}
		
		inline FORCEINLINE s32 const& operator[] (int i) const {
			return arr[i];
		}
		
		
		inline FORCEINLINE iv3 () {
			
		}
		
		// sets all components to one value
		// implicit constructor -> v3(x,y,z) * 5 will be turned into v3(x,y,z) * v3(5) by to compiler to be able to execute operator*(v3, v3), which is desirable, also v3 a = 0; works
		inline FORCEINLINE iv3 (s32 all): x{all}, y{all}, z{all} {
			
		}
		
		// supply all components
		inline FORCEINLINE iv3 (s32 x, s32 y, s32 z): x{x}, y{y}, z{z} {
			
		}
		// extend vector
		iv3 (iv2 xy, s32 z);
		// truncate vector
		iv3 (iv4 v);
		
		//// Truncating cast operators
		
		explicit operator iv2 () const;
		
		//// Type cast operators
		
		explicit operator bv3 () const;
		explicit operator fv3 () const;
		explicit operator dv3 () const;
		explicit operator s64v3 () const;
		explicit operator u8v3 () const;
		
		
		inline FORCEINLINE iv3 operator+= (iv3 r) {
			x += r.x;
			y += r.y;
			z += r.z;
			return *this;
		}
		
		inline FORCEINLINE iv3 operator-= (iv3 r) {
			x -= r.x;
			y -= r.y;
			z -= r.z;
			return *this;
		}
		
		inline FORCEINLINE iv3 operator*= (iv3 r) {
			x *= r.x;
			y *= r.y;
			z *= r.z;
			return *this;
		}
		
		inline FORCEINLINE iv3 operator/= (iv3 r) {
			x /= r.x;
			y /= r.y;
			z /= r.z;
			return *this;
		}
	};
	
	//// arthmethic ops
	
	inline FORCEINLINE iv3 operator+ (iv3 v) {
		return iv3(+v.x, +v.y, +v.z);
	}
	
	inline FORCEINLINE iv3 operator- (iv3 v) {
		return iv3(-v.x, -v.y, -v.z);
	}
	
	inline FORCEINLINE iv3 operator+ (iv3 l, iv3 r) {
		return iv3(l.x + r.x, l.y + r.y, l.z + r.z);
	}
	
	inline FORCEINLINE iv3 operator- (iv3 l, iv3 r) {
		return iv3(l.x - r.x, l.y - r.y, l.z - r.z);
	}
	
	inline FORCEINLINE iv3 operator* (iv3 l, iv3 r) {
		return iv3(l.x * r.x, l.y * r.y, l.z * r.z);
	}
	
	inline FORCEINLINE iv3 operator/ (iv3 l, iv3 r) {
		return iv3(l.x / r.x, l.y / r.y, l.z / r.z);
	}
	
	//// comparison ops
	bv3 operator< (iv3 l, iv3 r);
	bv3 operator<= (iv3 l, iv3 r);
	bv3 operator> (iv3 l, iv3 r);
	bv3 operator>= (iv3 l, iv3 r);
	bv3 operator== (iv3 l, iv3 r);
	bv3 operator!= (iv3 l, iv3 r);
	// vectors are equal, equivalent to all(l == r)
	bool equal (iv3 l, iv3 r);
	// componentwise ternary c ? l : r
	iv3 select (bv3 c, iv3 l, iv3 r);
	
	//// misc ops
	
	inline FORCEINLINE iv3 abs (iv3 v) {
		return iv3(abs(v.x), abs(v.y), abs(v.z));
	}
	
	inline FORCEINLINE iv3 min (iv3 l, iv3 r) {
		return iv3(min(l.x,r.x), min(l.y,r.y), min(l.z,r.z));
	}
	
	inline FORCEINLINE iv3 max (iv3 l, iv3 r) {
		return iv3(max(l.x,r.x), max(l.y,r.y), max(l.z,r.z));
	}
	iv3 clamp (iv3 x, iv3 a=iv3(0), iv3 b=iv3(1));
	// get min component of vector, optionally get component index via min_index
	s32 min_component (iv3 v, int* min_index=nullptr);
	// get max component of vector, optionally get component index via max_index
	s32 max_component (iv3 v, int* max_index=nullptr);
	
	
	inline FORCEINLINE iv3 wrap (iv3 v, iv3 range) {
		return iv3(wrap(v.x,range.x), wrap(v.y,range.y), wrap(v.z,range.z));
	}
	
	inline FORCEINLINE iv3 wrap (iv3 v, iv3 a, iv3 b) {
		return iv3(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y), wrap(v.z,a.z,b.z));
	}
	
	fv3 to_rad (iv3 deg);
	// degress "literal", converts degrees to radiants
	fv3 deg (iv3 deg);
	fv3 to_deg (iv3 rad);
	
	//// linear algebra ops
	// magnitude of vector
	f32 length (iv3 v);
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	s32 length_sqr (iv3 v);
	// distance between points, equivalent to length(a - b)
	f32 distance (iv3 a, iv3 b);
	// normalize vector so that it has length() = 1, undefined for zero vector
	fv3 normalize (iv3 v);
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	fv3 normalize_or_zero (iv3 v);
	// dot product
	s32 dot (iv3 l, iv3 r);
	// 3d cross product
	iv3 cross (iv3 l, iv3 r);
}// namespace vector

